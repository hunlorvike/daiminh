// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infrastructure;

#nullable disable

namespace infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorAvatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("author_avatar");

                    b.Property<string>("AuthorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("author_name");

                    b.Property<string>("BreadcrumbJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breadcrumb_json");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("canonical_url");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("EstimatedReadingMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("estimated_reading_minutes");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("featured_image");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("meta_title");

                    b.Property<bool>("NoFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_follow");

                    b.Property<bool>("NoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_index");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("website")
                        .HasColumnName("og_type");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("published_at");

                    b.Property<string>("SchemaMarkup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schema_markup");

                    b.Property<string>("SitemapChangeFrequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("monthly")
                        .HasColumnName("sitemap_change_frequency");

                    b.Property<double?>("SitemapPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.5)
                        .HasColumnName("sitemap_priority");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("summary");

                    b.Property<string>("ThumbnailImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("thumbnail_image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("TwitterCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("summary_large_image")
                        .HasColumnName("twitter_card");

                    b.Property<string>("TwitterDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("twitter_description");

                    b.Property<string>("TwitterImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("twitter_image");

                    b.Property<string>("TwitterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("twitter_title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublishedAt");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ArticleProduct", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("ArticleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("article_products", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("article_tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("attributes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(4607),
                            Name = "Màu sắc",
                            Slug = "mau-sac"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(4608),
                            Name = "Dung tích",
                            Slug = "dung-tich"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(4610),
                            Name = "Độ bóng",
                            Slug = "do-bong"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(4611),
                            Name = "Bề mặt áp dụng",
                            Slug = "be-mat-ap-dung"
                        });
                });

            modelBuilder.Entity("domain.Entities.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId", "Slug")
                        .IsUnique();

                    b.ToTable("attribute_values", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeId = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8689),
                            Slug = "trang",
                            Value = "Trắng"
                        },
                        new
                        {
                            Id = 2,
                            AttributeId = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8691),
                            Slug = "do",
                            Value = "Đỏ"
                        },
                        new
                        {
                            Id = 3,
                            AttributeId = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8692),
                            Slug = "xanh-duong",
                            Value = "Xanh dương"
                        },
                        new
                        {
                            Id = 4,
                            AttributeId = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8693),
                            Slug = "vang",
                            Value = "Vàng"
                        },
                        new
                        {
                            Id = 5,
                            AttributeId = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8694),
                            Slug = "1-lit",
                            Value = "1 Lít"
                        },
                        new
                        {
                            Id = 6,
                            AttributeId = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8695),
                            Slug = "5-lit",
                            Value = "5 Lít"
                        },
                        new
                        {
                            Id = 7,
                            AttributeId = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8696),
                            Slug = "18-lit",
                            Value = "18 Lít"
                        },
                        new
                        {
                            Id = 8,
                            AttributeId = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8697),
                            Slug = "20-kg",
                            Value = "20 Kg"
                        },
                        new
                        {
                            Id = 9,
                            AttributeId = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8698),
                            Slug = "bong",
                            Value = "Bóng"
                        },
                        new
                        {
                            Id = 10,
                            AttributeId = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8699),
                            Slug = "mo",
                            Value = "Mờ"
                        },
                        new
                        {
                            Id = 11,
                            AttributeId = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8700),
                            Slug = "ban-bong",
                            Value = "Bán bóng"
                        },
                        new
                        {
                            Id = 12,
                            AttributeId = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8701),
                            Slug = "tuong-noi-that",
                            Value = "Tường nội thất"
                        },
                        new
                        {
                            Id = 13,
                            AttributeId = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8702),
                            Slug = "tuong-ngoai-that",
                            Value = "Tường ngoại thất"
                        },
                        new
                        {
                            Id = 14,
                            AttributeId = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8703),
                            Slug = "san-be-tong",
                            Value = "Sàn bê tông"
                        },
                        new
                        {
                            Id = 15,
                            AttributeId = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(8704),
                            Slug = "san-thuong",
                            Value = "Sân thượng"
                        });
                });

            modelBuilder.Entity("domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("brands", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(2704),
                            IsActive = true,
                            Name = "Dulux",
                            Slug = "dulux"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(2706),
                            IsActive = true,
                            Name = "Jotun",
                            Slug = "jotun"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(2707),
                            IsActive = true,
                            Name = "Kova",
                            Slug = "kova"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(2708),
                            IsActive = true,
                            Name = "Sika",
                            Slug = "sika"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(2709),
                            IsActive = true,
                            Name = "Nippon Paint",
                            Slug = "nippon-paint"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(2710),
                            IsActive = true,
                            Name = "My Kolor",
                            Slug = "my-kolor"
                        });
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BreadcrumbJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breadcrumb_json");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("canonical_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("NoFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_follow");

                    b.Property<bool>("NoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_index");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("website")
                        .HasColumnName("og_type");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("SchemaMarkup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schema_markup");

                    b.Property<string>("SitemapChangeFrequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("monthly")
                        .HasColumnName("sitemap_change_frequency");

                    b.Property<double?>("SitemapPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.5)
                        .HasColumnName("sitemap_priority");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("slug");

                    b.Property<string>("TwitterCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("summary_large_image")
                        .HasColumnName("twitter_card");

                    b.Property<string>("TwitterDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("twitter_description");

                    b.Property<string>("TwitterImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("twitter_image");

                    b.Property<string>("TwitterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("twitter_title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9196),
                            IsActive = true,
                            Name = "Sơn",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 0,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "son",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9198),
                            IsActive = true,
                            Name = "Chống Thấm",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 1,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "chong-tham",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9199),
                            IsActive = true,
                            Name = "Vật Liệu Xây Dựng",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 2,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "vat-lieu-xay-dung",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9201),
                            IsActive = true,
                            Name = "Tin Tức & Sự Kiện",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 3,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "tin-tuc-su-kien",
                            TwitterCard = "summary_large_image",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9202),
                            IsActive = true,
                            Name = "Câu Hỏi Thường Gặp",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 4,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "cau-hoi-thuong-gap",
                            TwitterCard = "summary_large_image",
                            Type = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9204),
                            IsActive = true,
                            Name = "Sơn Nội Thất",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 0,
                            ParentId = 1,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "son-noi-that",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9206),
                            IsActive = true,
                            Name = "Sơn Ngoại Thất",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 1,
                            ParentId = 1,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "son-ngoai-that",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9237),
                            IsActive = true,
                            Name = "Sơn Lót",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 2,
                            ParentId = 1,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "son-lot",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9239),
                            IsActive = true,
                            Name = "Sơn Chống Kiềm",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 3,
                            ParentId = 1,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "son-chong-kiem",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9241),
                            IsActive = true,
                            Name = "Chống Thấm Sàn Mái",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 0,
                            ParentId = 2,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "chong-tham-san-mai",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9242),
                            IsActive = true,
                            Name = "Chống Thấm Tường",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 1,
                            ParentId = 2,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "chong-tham-tuong",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9244),
                            IsActive = true,
                            Name = "Chống Thấm Nhà Vệ Sinh",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 2,
                            ParentId = 2,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "chong-tham-nha-ve-sinh",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9245),
                            IsActive = true,
                            Name = "Phụ Gia Bê Tông",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 0,
                            ParentId = 3,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "phu-gia-be-tong",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 846, DateTimeKind.Utc).AddTicks(9247),
                            IsActive = true,
                            Name = "Keo Chít Mạch",
                            NoFollow = false,
                            NoIndex = false,
                            OgType = "website",
                            OrderIndex = 1,
                            ParentId = 3,
                            SitemapChangeFrequency = "monthly",
                            SitemapPriority = 0.5,
                            Slug = "keo-chit-mach",
                            TwitterCard = "summary_large_image",
                            Type = 0
                        });
                });

            modelBuilder.Entity("domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("admin_notes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("domain.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("question");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrderIndex");

                    b.ToTable("faqs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Sơn nội thất và ngoại thất khác nhau về thành phần hóa học để phù hợp với điều kiện môi trường. Sơn ngoại thất chứa các chất chống tia UV, chống thấm tốt hơn để chịu được nắng, mưa, ẩm ướt. Sơn nội thất an toàn hơn cho sức khỏe, ít mùi và có độ bền màu trong nhà tốt.",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 849, DateTimeKind.Utc).AddTicks(940),
                            IsActive = true,
                            OrderIndex = 0,
                            Question = "Sơn nội thất và sơn ngoại thất khác nhau như thế nào?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Lượng sơn cần dùng phụ thuộc vào diện tích cần sơn, loại sơn, và bề mặt. Trung bình 1 lít sơn có thể phủ được 8-10m2 cho 2 lớp. Bạn cần đo diện tích tường, trần nhà và tham khảo hướng dẫn của nhà sản xuất sơn.",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 849, DateTimeKind.Utc).AddTicks(942),
                            IsActive = true,
                            OrderIndex = 1,
                            Question = "Làm thế nào để tính toán lượng sơn cần dùng?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Sơn lót chống kiềm cần được sử dụng trên các bề mặt mới xây (vữa, bê tông) hoặc các bề mặt cũ có dấu hiệu bị kiềm hóa (ố vàng, phấn trắng) để ngăn chặn kiềm từ xi măng ăn mòn lớp sơn phủ màu.",
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 849, DateTimeKind.Utc).AddTicks(944),
                            IsActive = true,
                            OrderIndex = 2,
                            Question = "Khi nào cần sử dụng sơn lót chống kiềm?"
                        });
                });

            modelBuilder.Entity("domain.Entities.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<int>("MediaType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("media_type");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("original_file_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("media_files", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UnsubscribedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("unsubscribed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("newsletters", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<string>("BreadcrumbJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breadcrumb_json");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("canonical_url");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool>("NoFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_follow");

                    b.Property<bool>("NoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_index");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("website")
                        .HasColumnName("og_type");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("origin");

                    b.Property<string>("SchemaMarkup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schema_markup");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("short_description");

                    b.Property<string>("SitemapChangeFrequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("monthly")
                        .HasColumnName("sitemap_change_frequency");

                    b.Property<double?>("SitemapPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.5)
                        .HasColumnName("sitemap_priority");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("specifications");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("TwitterCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("summary_large_image")
                        .HasColumnName("twitter_card");

                    b.Property<string>("TwitterDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("twitter_description");

                    b.Property<string>("TwitterImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("twitter_image");

                    b.Property<string>("TwitterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("twitter_title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("usage");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.HasKey("ProductId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("product_attributes", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_main");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderIndex");

                    b.HasIndex("ProductId");

                    b.ToTable("product_images", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_email");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rating");

                    b.HasIndex("UserId");

                    b.ToTable("product_reviews", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("product_tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductVariation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_default");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("sale_price");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsDefault");

                    b.HasIndex("ProductId");

                    b.ToTable("product_variations", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductVariationAttributeValue", b =>
                {
                    b.Property<int>("ProductVariationId")
                        .HasColumnType("int")
                        .HasColumnName("product_variation_id");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_value_id");

                    b.HasKey("ProductVariationId", "AttributeValueId");

                    b.HasIndex("AttributeValueId");

                    b.ToTable("product_variation_attribute_values", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("key");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Category")
                        .IsUnique();

                    b.ToTable("settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1937),
                            DefaultValue = "Sơn Đại Minh Việt Nam",
                            Description = "Tên website hiển thị trên trang và tiêu đề trình duyệt.",
                            IsActive = true,
                            Key = "SiteName",
                            Type = 0,
                            Value = "Sơn Đại Minh Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1964),
                            DefaultValue = "https://localhost:7001",
                            Description = "Địa chỉ URL chính của website (ví dụ: https://www.example.com).",
                            IsActive = true,
                            Key = "SiteUrl",
                            Type = 7,
                            Value = "https://localhost:7001"
                        },
                        new
                        {
                            Id = 3,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1966),
                            DefaultValue = "sondaiminh@gmail.com",
                            Description = "Địa chỉ email quản trị viên để nhận thông báo hệ thống (đơn hàng, liên hệ...).",
                            IsActive = true,
                            Key = "AdminEmail",
                            Type = 6,
                            Value = "sondaiminh@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1967),
                            DefaultValue = "/images/logo.png",
                            Description = "Đường dẫn đến file logo website.",
                            IsActive = true,
                            Key = "LogoUrl",
                            Type = 3,
                            Value = "/images/logo.png"
                        },
                        new
                        {
                            Id = 5,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1969),
                            DefaultValue = "/images/favicon.ico",
                            Description = "Đường dẫn đến file favicon.ico hoặc ảnh favicon.",
                            IsActive = true,
                            Key = "FaviconUrl",
                            Type = 3,
                            Value = "/images/favicon.ico"
                        },
                        new
                        {
                            Id = 6,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1970),
                            DefaultValue = "12",
                            Description = "Số lượng sản phẩm/bài viết hiển thị trên mỗi trang danh sách mặc định.",
                            IsActive = true,
                            Key = "ItemsPerPage",
                            Type = 8,
                            Value = "12"
                        },
                        new
                        {
                            Id = 11,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1972),
                            DefaultValue = "Sơn Đại Minh",
                            Description = "Tên công ty hoặc tổ chức sở hữu website.",
                            IsActive = true,
                            Key = "CompanyName",
                            Type = 0,
                            Value = "Sơn Đại Minh"
                        },
                        new
                        {
                            Id = 12,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1973),
                            DefaultValue = "Tiên Phương, Chương Mỹ, Hà Nội",
                            Description = "Địa chỉ liên hệ đầy đủ của công ty.",
                            IsActive = true,
                            Key = "ContactAddress",
                            Type = 1,
                            Value = "Tiên Phương, Chương Mỹ, Hà Nội"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1975),
                            DefaultValue = "0979758340",
                            Description = "Số điện thoại liên hệ chung.",
                            IsActive = true,
                            Key = "ContactPhone",
                            Type = 4,
                            Value = "0979758340"
                        },
                        new
                        {
                            Id = 14,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1976),
                            DefaultValue = "sondaiminh@gmail.com",
                            Description = "Địa chỉ email hiển thị công khai để liên hệ.",
                            IsActive = true,
                            Key = "ContactEmail",
                            Type = 6,
                            Value = "sondaiminh@gmail.com"
                        },
                        new
                        {
                            Id = 15,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1977),
                            DefaultValue = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d5152.719628304902!2d105.68369562421606!3d20.94205043073292!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3134539b465b1be5%3A0x279c032890c390c5!2zxJDhuqFpIE1pbmggVmnhu4d0IE5hbQ!5e1!3m2!1svi!2s!4v1745895737603!5m2!1svi!2s\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Description = "Mã nhúng HTML của bản đồ (ví dụ: Google Maps iframe) hiển thị trên trang Liên hệ.",
                            IsActive = true,
                            Key = "ContactMapEmbed",
                            Type = 2,
                            Value = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d5152.719628304902!2d105.68369562421606!3d20.94205043073292!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3134539b465b1be5%3A0x279c032890c390c5!2zxJDhuqFpIE1pbmggVmnhu4d0IE5hbQ!5e1!3m2!1svi!2s!4v1745895737603!5m2!1svi!2s\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>"
                        },
                        new
                        {
                            Id = 16,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1979),
                            DefaultValue = "0979758340",
                            Description = "Số điện thoại Hotline hỗ trợ nhanh.",
                            IsActive = true,
                            Key = "HotlinePhone",
                            Type = 4,
                            Value = "0979758340"
                        },
                        new
                        {
                            Id = 17,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1980),
                            DefaultValue = "Thứ 2 - Thứ 7: 8h00 - 17h00",
                            Description = "Giờ làm việc của công ty.",
                            IsActive = true,
                            Key = "ContactWorkingHours",
                            Type = 0,
                            Value = "Thứ 2 - Thứ 7: 8h00 - 17h00"
                        },
                        new
                        {
                            Id = 18,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1982),
                            Description = "Mã số thuế của công ty.",
                            IsActive = true,
                            Key = "TaxId",
                            Type = 0
                        },
                        new
                        {
                            Id = 21,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1983),
                            DefaultValue = "Sơn Chống Thấm, Vật Liệu Sơn Chính Hãng | Đại Minh Việt Nam",
                            Description = "Tiêu đề meta mặc định cho các trang không có tiêu đề riêng.",
                            IsActive = true,
                            Key = "DefaultMetaTitle",
                            Type = 0,
                            Value = "Sơn Chống Thấm, Vật Liệu Sơn Chính Hãng | Đại Minh Việt Nam"
                        },
                        new
                        {
                            Id = 22,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1985),
                            DefaultValue = "Đại Minh Việt Nam chuyên cung cấp sơn, vật liệu chống thấm, phụ gia bê tông chính hãng từ các thương hiệu hàng đầu. Tư vấn giải pháp thi công hiệu quả. Liên hệ 0979758340.",
                            Description = "Mô tả meta mặc định (dưới 160 ký tự) cho các trang không có mô tả riêng.",
                            IsActive = true,
                            Key = "DefaultMetaDescription",
                            Type = 1,
                            Value = "Đại Minh Việt Nam chuyên cung cấp sơn, vật liệu chống thấm, phụ gia bê tông chính hãng từ các thương hiệu hàng đầu. Tư vấn giải pháp thi công hiệu quả. Liên hệ 0979758340."
                        },
                        new
                        {
                            Id = 23,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1987),
                            Description = "Mã ID Google Analytics (ví dụ: UA-XXXXXXX-Y hoặc G-XXXXXXXXXX).",
                            IsActive = true,
                            Key = "GoogleAnalyticsId",
                            Type = 0
                        },
                        new
                        {
                            Id = 24,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1988),
                            Description = "Các meta tag xác minh website (Google, Bing, ...).",
                            IsActive = true,
                            Key = "VerificationMetaTags",
                            Type = 1
                        },
                        new
                        {
                            Id = 31,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1989),
                            DefaultValue = "https://www.facebook.com/LienDaiMinh",
                            Description = "URL trang Facebook của công ty.",
                            IsActive = true,
                            Key = "SocialFacebookUrl",
                            Type = 7,
                            Value = "https://www.facebook.com/LienDaiMinh"
                        },
                        new
                        {
                            Id = 32,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1991),
                            Description = "URL trang Twitter (X) của công ty.",
                            IsActive = true,
                            Key = "SocialTwitterUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 33,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1992),
                            Description = "URL trang Instagram của công ty.",
                            IsActive = true,
                            Key = "SocialInstagramUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 34,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1993),
                            Description = "URL trang LinkedIn của công ty.",
                            IsActive = true,
                            Key = "SocialLinkedInUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 35,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1995),
                            Description = "URL kênh Youtube của công ty.",
                            IsActive = true,
                            Key = "SocialYoutubeUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 36,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1996),
                            DefaultValue = "https://www.tiktok.com/@hung.daiminh",
                            Description = "URL kênh Tiktok của công ty.",
                            IsActive = true,
                            Key = "SocialTiktokUrl",
                            Type = 7,
                            Value = "https://www.tiktok.com/@hung.daiminh"
                        },
                        new
                        {
                            Id = 37,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1997),
                            DefaultValue = "0979758340",
                            Description = "Số điện thoại Zalo để liên hệ nhanh (có thể khác Hotline).",
                            IsActive = true,
                            Key = "SocialZaloPhone",
                            Type = 4,
                            Value = "0979758340"
                        },
                        new
                        {
                            Id = 41,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(1998),
                            DefaultValue = "smtp.example.com",
                            Description = "Địa chỉ máy chủ SMTP để gửi email.",
                            IsActive = true,
                            Key = "SmtpHost",
                            Type = 0,
                            Value = "smtp.example.com"
                        },
                        new
                        {
                            Id = 42,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2000),
                            DefaultValue = "587",
                            Description = "Cổng SMTP (ví dụ: 587, 465, 25).",
                            IsActive = true,
                            Key = "SmtpPort",
                            Type = 8,
                            Value = "587"
                        },
                        new
                        {
                            Id = 43,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2001),
                            DefaultValue = "user@example.com",
                            Description = "Tên đăng nhập SMTP.",
                            IsActive = true,
                            Key = "SmtpUsername",
                            Type = 0,
                            Value = "user@example.com"
                        },
                        new
                        {
                            Id = 44,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2002),
                            Description = "**QUAN TRỌNG**: Mật khẩu SMTP. Nên cấu hình qua UI, không seed giá trị thật.",
                            IsActive = true,
                            Key = "SmtpPassword",
                            Type = 0
                        },
                        new
                        {
                            Id = 45,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2004),
                            DefaultValue = "true",
                            Description = "Sử dụng mã hóa SSL/TLS khi gửi email.",
                            IsActive = true,
                            Key = "SmtpUseSsl",
                            Type = 9,
                            Value = "true"
                        },
                        new
                        {
                            Id = 46,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2006),
                            DefaultValue = "Đại Minh Việt Nam",
                            Description = "Tên hiển thị trong ô 'From' của email gửi đi.",
                            IsActive = true,
                            Key = "EmailFromName",
                            Type = 0,
                            Value = "Đại Minh Việt Nam"
                        },
                        new
                        {
                            Id = 47,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2007),
                            DefaultValue = "noreply@daiminhvietnam.com",
                            Description = "Địa chỉ email hiển thị trong ô 'From' của email gửi đi.",
                            IsActive = true,
                            Key = "EmailFromAddress",
                            Type = 6,
                            Value = "noreply@daiminhvietnam.com"
                        },
                        new
                        {
                            Id = 48,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2008),
                            DefaultValue = "ContactReply",
                            Description = "Mã/tên template email phản hồi tự động khi nhận form liên hệ.",
                            IsActive = true,
                            Key = "EmailTemplateContactFormReply",
                            Type = 0,
                            Value = "ContactReply"
                        },
                        new
                        {
                            Id = 49,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2009),
                            DefaultValue = "NewsletterSubscribe",
                            Description = "Mã/tên template email xác nhận đăng ký nhận tin.",
                            IsActive = true,
                            Key = "EmailTemplateNewsletterSubscribe",
                            Type = 0,
                            Value = "NewsletterSubscribe"
                        },
                        new
                        {
                            Id = 51,
                            Category = "Appearance",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2011),
                            DefaultValue = "/images/banners/banner1.jpg",
                            Description = "URL ảnh banner chính trang chủ.",
                            IsActive = true,
                            Key = "HomepageBanner1Url",
                            Type = 3,
                            Value = "/images/banners/banner1.jpg"
                        },
                        new
                        {
                            Id = 52,
                            Category = "Appearance",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2012),
                            DefaultValue = "/",
                            Description = "URL liên kết khi click banner chính trang chủ.",
                            IsActive = true,
                            Key = "HomepageBanner1Link",
                            Type = 7,
                            Value = "/"
                        },
                        new
                        {
                            Id = 53,
                            Category = "Appearance",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2057),
                            DefaultValue = "© 2025 Sơn Đại Minh Việt Nam. All rights reserved.",
                            Description = "Nội dung text copyright hiển thị ở chân trang.",
                            IsActive = true,
                            Key = "CopyrightText",
                            Type = 0,
                            Value = "© 2025 Sơn Đại Minh Việt Nam. All rights reserved."
                        },
                        new
                        {
                            Id = 61,
                            Category = "Integration",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2058),
                            Description = "Mã script nhúng Live Chat (Zalo, Tawk.to, subiz...).",
                            IsActive = true,
                            Key = "LiveChatScript",
                            Type = 2
                        },
                        new
                        {
                            Id = 71,
                            Category = "E-commerce",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2059),
                            DefaultValue = "VND",
                            Description = "Mã tiền tệ chính được sử dụng (ví dụ: VND, USD).",
                            IsActive = true,
                            Key = "CurrencyCode",
                            Type = 0,
                            Value = "VND"
                        },
                        new
                        {
                            Id = 72,
                            Category = "E-commerce",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2060),
                            DefaultValue = "đ",
                            Description = "Ký hiệu tiền tệ hiển thị (ví dụ: đ, $).",
                            IsActive = true,
                            Key = "CurrencySymbol",
                            Type = 0,
                            Value = "đ"
                        },
                        new
                        {
                            Id = 73,
                            Category = "E-commerce",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(2062),
                            DefaultValue = "/images/product-placeholder.png",
                            Description = "URL ảnh mặc định hiển thị khi sản phẩm không có ảnh.",
                            IsActive = true,
                            Key = "DefaultProductImageUrl",
                            Type = 3,
                            Value = "/images/product-placeholder.png"
                        });
                });

            modelBuilder.Entity("domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("slug");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(514),
                            Name = "Chống thấm",
                            Slug = "chong-tham",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(515),
                            Name = "Sơn nội thất",
                            Slug = "son-noi-that",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(516),
                            Name = "Sơn ngoại thất",
                            Slug = "son-ngoai-that",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(517),
                            Name = "Phụ gia bê tông",
                            Slug = "phu-gia-be-tong",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(519),
                            Name = "Keo chít mạch",
                            Slug = "keo-chit-mach",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(520),
                            Name = "Vật liệu xây dựng",
                            Slug = "vat-lieu-xay-dung",
                            Type = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(521),
                            Name = "Tư vấn chọn sơn",
                            Slug = "tu-van-chon-son",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(522),
                            Name = "Hướng dẫn thi công",
                            Slug = "huong-dan-thi-cong",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(523),
                            Name = "Kinh nghiệm chống thấm",
                            Slug = "kinh-nghiem-chong-tham",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(524),
                            Name = "Bảo trì nhà cửa",
                            Slug = "bao-tri-nha-cua",
                            Type = 1
                        });
                });

            modelBuilder.Entity("domain.Entities.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientAvatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("client_avatar");

                    b.Property<string>("ClientCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_company");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_title");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderIndex");

                    b.HasIndex("Rating");

                    b.ToTable("testimonials", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientName = "Nguyễn Văn A",
                            ClientTitle = "Chủ nhà",
                            Content = "Sơn của Đại Minh rất bền màu và dễ thi công. Tôi rất hài lòng!",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(6617),
                            IsActive = true,
                            OrderIndex = 0,
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            ClientCompany = "Công ty Xây dựng B&B",
                            ClientName = "Trần Thị B",
                            ClientTitle = "Nhà thầu",
                            Content = "Vật liệu chống thấm Sika từ Đại Minh luôn đảm bảo chất lượng cho công trình của chúng tôi.",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(6619),
                            IsActive = true,
                            OrderIndex = 1,
                            Rating = 5
                        },
                        new
                        {
                            Id = 3,
                            ClientName = "Lê Văn C",
                            ClientTitle = "Khách hàng cá nhân",
                            Content = "Được tư vấn rất nhiệt tình để chọn đúng loại sơn cho ngôi nhà cũ. Dịch vụ tuyệt vời!",
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 847, DateTimeKind.Utc).AddTicks(6621),
                            IsActive = true,
                            OrderIndex = 2,
                            Rating = 4
                        });
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 29, 3, 44, 48, 810, DateTimeKind.Utc).AddTicks(4414),
                            Email = "admin@admin.com",
                            FullName = "Quản trị viên",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEEGsXko+r8CaeyC70ka+OrGAqCCqUmANz1mZTquSWeno7zFtEFVJXDAU/ZNeU43wLg==",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("domain.Entities.Article", b =>
                {
                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("domain.Entities.ArticleProduct", b =>
                {
                    b.HasOne("domain.Entities.Article", "Article")
                        .WithMany("ArticleProducts")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ArticleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ArticleTag", b =>
                {
                    b.HasOne("domain.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("domain.Entities.AttributeValue", b =>
                {
                    b.HasOne("domain.Entities.Attribute", "Attribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.HasOne("domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("domain.Entities.FAQ", b =>
                {
                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("FAQs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.HasOne("domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("domain.Entities.ProductAttribute", b =>
                {
                    b.HasOne("domain.Entities.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductImage", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductReview", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.User", "User")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.ProductTag", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("domain.Entities.ProductVariation", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Variations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductVariationAttributeValue", b =>
                {
                    b.HasOne("domain.Entities.AttributeValue", "AttributeValue")
                        .WithMany("ProductVariationAttributeValues")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.ProductVariation", "ProductVariation")
                        .WithMany("ProductVariationAttributeValues")
                        .HasForeignKey("ProductVariationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");

                    b.Navigation("ProductVariation");
                });

            modelBuilder.Entity("domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleProducts");

                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("domain.Entities.Attribute", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("domain.Entities.AttributeValue", b =>
                {
                    b.Navigation("ProductVariationAttributeValues");
                });

            modelBuilder.Entity("domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Children");

                    b.Navigation("FAQs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.Navigation("ArticleProducts");

                    b.Navigation("Images");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductTags");

                    b.Navigation("Reviews");

                    b.Navigation("Variations");
                });

            modelBuilder.Entity("domain.Entities.ProductVariation", b =>
                {
                    b.Navigation("ProductVariationAttributeValues");
                });

            modelBuilder.Entity("domain.Entities.Tag", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Navigation("ReviewsWritten");
                });
#pragma warning restore 612, 618
        }
    }
}
