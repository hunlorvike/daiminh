// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using infrastructure;

#nullable disable

namespace infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EntityType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("entity_type");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_category_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_categories_name");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("idx_categories_parent_category_id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5876),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn nội thất",
                            Slug = "son-noi-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5876)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5878),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn ngoại thất",
                            Slug = "son-ngoai-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5878)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5879),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn chống thấm",
                            Slug = "son-chong-tham",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5879)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5880),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn lót",
                            Slug = "son-lot",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5880)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5881),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn gỗ",
                            Slug = "son-go",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5881)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5882),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn kim loại",
                            Slug = "son-kim-loai",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5882)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5883),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Dụng cụ sơn",
                            Slug = "dung-cu-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5884)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5884),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn bóng nội thất",
                            ParentCategoryId = 1,
                            Slug = "son-bong-noi-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5885)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5886),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn mờ nội thất",
                            ParentCategoryId = 1,
                            Slug = "son-mo-noi-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5886)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5887),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn bóng ngoại thất",
                            ParentCategoryId = 2,
                            Slug = "son-bong-ngoai-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5888)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5889),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn mờ ngoại thất",
                            ParentCategoryId = 2,
                            Slug = "son-mo-ngoai-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5889)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5890),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn chống thấm gốc nước",
                            ParentCategoryId = 3,
                            Slug = "son-chong-tham-goc-nuoc",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5890)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5891),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Sơn chống thấm gốc dầu",
                            ParentCategoryId = 3,
                            Slug = "son-chong-tham-goc-dau",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5891)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5892),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Cọ sơn",
                            ParentCategoryId = 7,
                            Slug = "co-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5893)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5893),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Con lăn sơn",
                            ParentCategoryId = 7,
                            Slug = "con-lan-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5894)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5895),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Băng keo dán sơn",
                            ParentCategoryId = 7,
                            Slug = "bang-keo-dan-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5895)
                        },
                        new
                        {
                            Id = 101,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5896),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Dịch vụ thi công sơn trọn gói",
                            Slug = "dich-vu-thi-cong-son-tron-goi",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5896)
                        },
                        new
                        {
                            Id = 102,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5897),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Tư vấn phối màu sơn",
                            Slug = "tu-van-phoi-mau-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5897)
                        },
                        new
                        {
                            Id = 103,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5898),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Tư vấn kỹ thuật sơn",
                            Slug = "tu-van-ky-thuat-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5898)
                        },
                        new
                        {
                            Id = 104,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5899),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thi công sơn nội thất trọn gói",
                            ParentCategoryId = 101,
                            Slug = "thi-cong-son-noi-that-tron-goi",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5899)
                        },
                        new
                        {
                            Id = 105,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5900),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thi công sơn ngoại thất trọn gói",
                            ParentCategoryId = 101,
                            Slug = "thi-cong-son-ngoai-that-tron-goi",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(5901)
                        });
                });

            modelBuilder.Entity("domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_comment_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("approved")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("idx_comments_content_id");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("idx_comments_parent_comment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_contacts_email");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("canonical_url");

                    b.Property<string>("ContentBody")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_body");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("CoverImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("og_title");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("draft")
                        .HasColumnName("status");

                    b.Property<string>("StructuredData")
                        .HasColumnType("text")
                        .HasColumnName("structured_data");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("idx_contents_author_id");

                    b.HasIndex("ContentTypeId")
                        .HasDatabaseName("idx_contents_content_type_id");

                    b.HasIndex("Slug")
                        .HasDatabaseName("idx_contents_slug");

                    b.ToTable("contents", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ContentCategory", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ContentId", "CategoryId");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("idx_content_categories_category_id");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("idx_content_categories_content_id");

                    b.ToTable("content_categories", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ContentFieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("field_name");

                    b.Property<string>("FieldOptions")
                        .HasColumnType("text")
                        .HasColumnName("field_options");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("text")
                        .HasColumnName("field_type");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId")
                        .HasDatabaseName("idx_content_field_definitions_content_type_id");

                    b.ToTable("content_field_definitions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentTypeId = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5389),
                            FieldName = "Mô tả ngắn",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = true,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5389)
                        },
                        new
                        {
                            Id = 2,
                            ContentTypeId = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5391),
                            FieldName = "Quy trình chi tiết",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = false,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5391)
                        },
                        new
                        {
                            Id = 3,
                            ContentTypeId = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5392),
                            FieldName = "Bảng giá tham khảo",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = false,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5392)
                        },
                        new
                        {
                            Id = 4,
                            ContentTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5393),
                            FieldName = "Mô tả ngắn",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = true,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5393)
                        },
                        new
                        {
                            Id = 5,
                            ContentTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5394),
                            FieldName = "Nội dung chi tiết",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = false,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5394)
                        },
                        new
                        {
                            Id = 6,
                            ContentTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5435),
                            FieldName = "Hình thức tư vấn",
                            FieldOptions = "[{\"value\":\"online\",\"label\":\"Tr\\u1EF1c tuy\\u1EBFn\"},{\"value\":\"offline\",\"label\":\"Tr\\u1EF1c ti\\u1EBFp\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(5435)
                        },
                        new
                        {
                            Id = 7,
                            ContentTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(6019),
                            FieldName = "Thời lượng tư vấn (phút)",
                            FieldType = "number",
                            IsActive = true,
                            IsRequired = true,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(6019)
                        },
                        new
                        {
                            Id = 8,
                            ContentTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(6021),
                            FieldName = "Chi phí",
                            FieldType = "number",
                            IsActive = true,
                            IsRequired = false,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(6021)
                        },
                        new
                        {
                            Id = 9,
                            ContentTypeId = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(6022),
                            FieldName = "Ảnh minh họa",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = false,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 462, DateTimeKind.Utc).AddTicks(6023)
                        });
                });

            modelBuilder.Entity("domain.Entities.ContentFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("idx_content_field_values_content_id");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("idx_content_field_values_field_id");

                    b.ToTable("content_field_values", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ContentTag", b =>
                {
                    b.Property<int>("ContentId")
                        .HasColumnType("integer")
                        .HasColumnName("content_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ContentId", "TagId");

                    b.HasIndex("ContentId")
                        .HasDatabaseName("idx_content_tags_content_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("idx_content_tags_tag_id");

                    b.ToTable("content_tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .HasDatabaseName("idx_content_types_slug");

                    b.ToTable("content_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8892),
                            IsActive = true,
                            Name = "Bài viết",
                            Slug = "bai-viet",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8893)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8902),
                            IsActive = true,
                            Name = "Trang tĩnh",
                            Slug = "trang-tinh",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8902)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8903),
                            IsActive = true,
                            Name = "Dịch vụ",
                            Slug = "dich-vu",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8904)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8905),
                            IsActive = true,
                            Name = "Tư vấn",
                            Slug = "tu-van",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8905)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8906),
                            IsActive = true,
                            Name = "Chính sách",
                            Slug = "chinh-sach",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 461, DateTimeKind.Utc).AddTicks(8906)
                        });
                });

            modelBuilder.Entity("domain.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path")
                        .HasDatabaseName("idx_folders_path");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("domain.Entities.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("extension");

                    b.Property<int?>("FolderId")
                        .HasColumnType("integer")
                        .HasColumnName("folder_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("Path")
                        .HasDatabaseName("idx_media_files_path");

                    b.ToTable("media_files", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("base_price");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("canonical_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("og_title");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("product_type_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sku");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("draft")
                        .HasColumnName("status");

                    b.Property<string>("StructuredData")
                        .HasColumnType("text")
                        .HasColumnName("structured_data");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId")
                        .HasDatabaseName("idx_products_product_type_id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_products_slug");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("idx_product_categories_category_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_categories_product_id");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductFieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("field_name");

                    b.Property<string>("FieldOptions")
                        .HasColumnType("text")
                        .HasColumnName("field_options");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("text")
                        .HasColumnName("field_type");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_required");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("product_type_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId")
                        .HasDatabaseName("idx_product_field_definitions_product_type_id");

                    b.ToTable("product_field_definitions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(4989),
                            FieldName = "Độ bóng",
                            FieldOptions = "[{\"value\":\"bong-mo\",\"label\":\"B\\u00F3ng m\\u1EDD\"},{\"value\":\"bong-nhe\",\"label\":\"B\\u00F3ng nh\\u1EB9\"},{\"value\":\"bong-cao\",\"label\":\"B\\u00F3ng cao\"},{\"value\":\"sieu-bong\",\"label\":\"Si\\u00EAu b\\u00F3ng\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 1,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(4989)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5666),
                            FieldName = "Dung tích",
                            FieldOptions = "[{\"value\":\"1-lit\",\"label\":\"1 L\\u00EDt\"},{\"value\":\"5-lit\",\"label\":\"5 L\\u00EDt\"},{\"value\":\"18-lit\",\"label\":\"18 L\\u00EDt\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 1,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5667)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5801),
                            FieldName = "Màu sắc",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 1,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5802)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5804),
                            FieldName = "Độ bóng",
                            FieldOptions = "[{\"value\":\"bong\",\"label\":\"B\\u00F3ng\"},{\"value\":\"mo\",\"label\":\"M\\u1EDD\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 2,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5804)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5888),
                            FieldName = "Dung tích",
                            FieldOptions = "[{\"value\":\"0-5-lit\",\"label\":\"0.5 L\\u00EDt\"},{\"value\":\"1-lit\",\"label\":\"1 L\\u00EDt\"},{\"value\":\"4-lit\",\"label\":\"4 L\\u00EDt\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 2,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5889)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5986),
                            FieldName = "Loại bề mặt",
                            FieldOptions = "[{\"value\":\"go\",\"label\":\"G\\u1ED7\"},{\"value\":\"kim-loai\",\"label\":\"Kim lo\\u1EA1i\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 2,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(5986)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6065),
                            FieldName = "Màu sắc",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 2,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6066)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6067),
                            FieldName = "Loại chống thấm",
                            FieldOptions = "[{\"value\":\"tuong-dung\",\"label\":\"T\\u01B0\\u1EDDng \\u0111\\u1EE9ng\"},{\"value\":\"san-mai\",\"label\":\"S\\u00E0n m\\u00E1i\"},{\"value\":\"nha-ve-sinh\",\"label\":\"Nh\\u00E0 v\\u1EC7 sinh\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 7,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6068)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6171),
                            FieldName = "Dung tích",
                            FieldOptions = "[{\"value\":\"1-kg\",\"label\":\"1 Kg\"},{\"value\":\"5-kg\",\"label\":\"5 Kg\"},{\"value\":\"20-kg\",\"label\":\"20 Kg\"}]",
                            FieldType = "select",
                            IsActive = true,
                            IsRequired = true,
                            ProductTypeId = 7,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6171)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6242),
                            FieldName = "Màu sắc",
                            FieldType = "text",
                            IsActive = true,
                            IsRequired = false,
                            ProductTypeId = 7,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 469, DateTimeKind.Utc).AddTicks(6242)
                        });
                });

            modelBuilder.Entity("domain.Entities.ProductFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer")
                        .HasColumnName("field_id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("FieldId")
                        .HasDatabaseName("idx_product_field_values_field_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_field_values_product_id");

                    b.ToTable("product_field_values", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<short>("DisplayOrder")
                        .HasColumnType("smallint")
                        .HasColumnName("display_order");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_primary");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_images_product_id");

                    b.ToTable("product_image", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_tags_product_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("idx_product_tags_tag_id");

                    b.ToTable("product_tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("idx_product_types_name");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_product_types_slug");

                    b.ToTable("product_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7886),
                            IsActive = true,
                            Name = "Sơn Nước",
                            Slug = "son-nuoc",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7888)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7889),
                            IsActive = true,
                            Name = "Sơn Dầu",
                            Slug = "son-dau",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7890)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7891),
                            IsActive = true,
                            Name = "Sơn Acrylic",
                            Slug = "son-acrylic",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7891)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7892),
                            IsActive = true,
                            Name = "Sơn Epoxy",
                            Slug = "son-epoxy",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7892)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7893),
                            IsActive = true,
                            Name = "Sơn Alkyd",
                            Slug = "son-alkyd",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7893)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7894),
                            IsActive = true,
                            Name = "Sơn Lót",
                            Slug = "son-lot",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7894)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7895),
                            IsActive = true,
                            Name = "Sơn Chống Thấm",
                            Slug = "son-chong-tham",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7895)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7896),
                            IsActive = true,
                            Name = "Sơn Gỗ",
                            Slug = "son-go",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7896)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7897),
                            IsActive = true,
                            Name = "Sơn Kim Loại",
                            Slug = "son-kim-loai",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 468, DateTimeKind.Utc).AddTicks(7897)
                        });
                });

            modelBuilder.Entity("domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("rating");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_reviews_product_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_reviews_user_id");

                    b.ToTable("reviews", null, t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "rating BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_roles_name");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 458, DateTimeKind.Utc).AddTicks(7040),
                            IsActive = true,
                            Name = "Admin",
                            Permissions = "",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 458, DateTimeKind.Utc).AddTicks(7041)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 458, DateTimeKind.Utc).AddTicks(7042),
                            IsActive = true,
                            Name = "User",
                            Permissions = "",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 458, DateTimeKind.Utc).AddTicks(7042)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 458, DateTimeKind.Utc).AddTicks(7043),
                            IsActive = true,
                            Name = "Manager",
                            Permissions = "",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 458, DateTimeKind.Utc).AddTicks(7043)
                        });
                });

            modelBuilder.Entity("domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("key");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("idx_settings_key");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("text")
                        .HasColumnName("link_url");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("OverlayHtml")
                        .HasColumnType("text")
                        .HasColumnName("overlay_html");

                    b.Property<string>("OverlayPosition")
                        .HasColumnType("text")
                        .HasColumnName("overlay_position");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("slider", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Subscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_subscriber_email");

                    b.ToTable("subscriber", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("EntityType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("entity_type");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .HasDatabaseName("idx_tags_slug");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9849),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Chống thấm",
                            Slug = "chong-tham",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9850)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9852),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Bền màu",
                            Slug = "ben-mau",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9852)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9853),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Dễ lau chùi",
                            Slug = "de-lau-chui",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9853)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9854),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Kháng khuẩn",
                            Slug = "khang-khuan",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9855)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9855),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Chống nấm mốc",
                            Slug = "chong-nam-moc",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9856)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9856),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Giá rẻ",
                            Slug = "gia-re",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9857)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9857),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Chất lượng",
                            Slug = "chat-luong",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9858)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9858),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Cao cấp",
                            Slug = "cao-cap",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9859)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9860),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Màu sắc bền đẹp",
                            Slug = "mau-sac-ben-dep",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9860)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9861),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Dễ thi công",
                            Slug = "de-thi-cong",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9861)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9862),
                            EntityType = 0,
                            IsActive = true,
                            Name = "An toàn",
                            Slug = "an-toan",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9862)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9863),
                            EntityType = 0,
                            IsActive = true,
                            Name = "Thương hiệu nổi tiếng",
                            Slug = "thuong-hieu-noi-tieng",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9863)
                        },
                        new
                        {
                            Id = 101,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9864),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thi công nhanh chóng",
                            Slug = "thi-cong-nhanh-chong",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9864)
                        },
                        new
                        {
                            Id = 102,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9865),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thợ sơn tay nghề cao",
                            Slug = "tho-son-tay-nghe-cao",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9865)
                        },
                        new
                        {
                            Id = 103,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9866),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Bảo hành dài hạn",
                            Slug = "bao-hanh-dai-han",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9866)
                        },
                        new
                        {
                            Id = 104,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9867),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Tư vấn màu sắc miễn phí",
                            Slug = "tu-van-mau-sac-mien-phi",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9867)
                        },
                        new
                        {
                            Id = 105,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9868),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Báo giá cạnh tranh",
                            Slug = "bao-gia-canh-tranh",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9868)
                        },
                        new
                        {
                            Id = 106,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9869),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thi công sơn nội thất",
                            Slug = "thi-cong-son-noi-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9869)
                        },
                        new
                        {
                            Id = 107,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9870),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thi công sơn ngoại thất",
                            Slug = "thi-cong-son-ngoai-that",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9870)
                        },
                        new
                        {
                            Id = 108,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9871),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Tư vấn kỹ thuật chuyên nghiệp",
                            Slug = "tu-van-ky-thuat-chuyen-nghiep",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9871)
                        },
                        new
                        {
                            Id = 109,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9872),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Thi công sơn trọn gói",
                            Slug = "thi-cong-son-tron-goi",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9872)
                        },
                        new
                        {
                            Id = 110,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9873),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Tư vấn lựa chọn sơn",
                            Slug = "tu-van-lua-chon-son",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9873)
                        },
                        new
                        {
                            Id = 111,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9874),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Đảm bảo chất lượng thi công",
                            Slug = "dam-bao-chat-luong-thi-cong",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9874)
                        },
                        new
                        {
                            Id = 112,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9875),
                            EntityType = 1,
                            IsActive = true,
                            Name = "Hỗ trợ tận tâm",
                            Slug = "ho-tro-tan-tam",
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 459, DateTimeKind.Utc).AddTicks(9875)
                        });
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_users_email");

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_users_username");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 59, DateTimeKind.Utc).AddTicks(9884),
                            Email = "admin@admin.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$Z4lGO7u7lXj7PmulY2393u3QodblRNxqbPZ/UW0JiJAZQ59OgJbpO",
                            RoleId = 1,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 59, DateTimeKind.Utc).AddTicks(9886),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 178, DateTimeKind.Utc).AddTicks(3133),
                            Email = "user@user.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$F/ZE0HaFXlSvfGTsguS3d.2iaTfKjfEDG4y/xxBalhYWTJK9Mzdoy",
                            RoleId = 2,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 178, DateTimeKind.Utc).AddTicks(3136),
                            Username = "user"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 327, DateTimeKind.Utc).AddTicks(9359),
                            Email = "manager@manager.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$QvcQcI3zebftm./bAIJLPuVVs6823.MDSmRfND0k0HPqmyyAp9SV6",
                            RoleId = 3,
                            UpdatedAt = new DateTime(2025, 3, 20, 10, 13, 43, 327, DateTimeKind.Utc).AddTicks(9363),
                            Username = "manager"
                        });
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.HasOne("domain.Entities.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("domain.Entities.Comment", b =>
                {
                    b.HasOne("domain.Entities.Content", "Content")
                        .WithMany("Comments")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Content");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.Content", b =>
                {
                    b.HasOne("domain.Entities.User", "Author")
                        .WithMany("Contents")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("domain.Entities.ContentType", "ContentType")
                        .WithMany("Contents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("domain.Entities.ContentCategory", b =>
                {
                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("ContentCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Content", "Content")
                        .WithMany("ContentCategories")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("domain.Entities.ContentFieldDefinition", b =>
                {
                    b.HasOne("domain.Entities.ContentType", "ContentType")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("domain.Entities.ContentFieldValue", b =>
                {
                    b.HasOne("domain.Entities.Content", "Content")
                        .WithMany("FieldValues")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.ContentFieldDefinition", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("domain.Entities.ContentTag", b =>
                {
                    b.HasOne("domain.Entities.Content", "Content")
                        .WithMany("ContentTags")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Tag", "Tag")
                        .WithMany("ContentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("domain.Entities.Folder", b =>
                {
                    b.HasOne("domain.Entities.Folder", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_folders_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("domain.Entities.MediaFile", b =>
                {
                    b.HasOne("domain.Entities.Folder", "Folder")
                        .WithMany("MediaFiles")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_media_files_folder_id");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.HasOne("domain.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductFieldDefinition", b =>
                {
                    b.HasOne("domain.Entities.ProductType", "ProductType")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("domain.Entities.ProductFieldValue", b =>
                {
                    b.HasOne("domain.Entities.ProductFieldDefinition", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("FieldValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductImage", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductTag", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("domain.Entities.Review", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.HasOne("domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("ContentCategories");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("domain.Entities.Comment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("domain.Entities.Content", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContentCategories");

                    b.Navigation("ContentTags");

                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("domain.Entities.ContentFieldDefinition", b =>
                {
                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("domain.Entities.ContentType", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("FieldDefinitions");
                });

            modelBuilder.Entity("domain.Entities.Folder", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.Navigation("FieldValues");

                    b.Navigation("Images");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductTags");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("domain.Entities.ProductFieldDefinition", b =>
                {
                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("domain.Entities.ProductType", b =>
                {
                    b.Navigation("FieldDefinitions");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("domain.Entities.Tag", b =>
                {
                    b.Navigation("ContentTags");

                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contents");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
