// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infrastructure;

#nullable disable

namespace infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250422152352_version1")]
    partial class version1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("domain.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorAvatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("author_avatar");

                    b.Property<string>("AuthorId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("author_name");

                    b.Property<string>("BreadcrumbJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breadcrumb_json");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("canonical_url");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("EstimatedReadingMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("estimated_reading_minutes");

                    b.Property<string>("FeaturedImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("featured_image");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("meta_title");

                    b.Property<bool>("NoFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_follow");

                    b.Property<bool>("NoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_index");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("website")
                        .HasColumnName("og_type");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("published_at");

                    b.Property<string>("SchemaMarkup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schema_markup");

                    b.Property<string>("SitemapChangeFrequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("monthly")
                        .HasColumnName("sitemap_change_frequency");

                    b.Property<double?>("SitemapPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.5)
                        .HasColumnName("sitemap_priority");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Summary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("summary");

                    b.Property<string>("ThumbnailImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("thumbnail_image");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("TwitterCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("summary_large_image")
                        .HasColumnName("twitter_card");

                    b.Property<string>("TwitterDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("twitter_description");

                    b.Property<string>("TwitterImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("twitter_image");

                    b.Property<string>("TwitterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("twitter_title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("idx_articles_author_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("idx_articles_category_id");

                    b.HasIndex("IsFeatured")
                        .HasDatabaseName("idx_articles_is_featured");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("idx_articles_published_at");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_articles_slug");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_articles_status");

                    b.HasIndex("ViewCount")
                        .HasDatabaseName("idx_articles_view_count");

                    b.ToTable("articles", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ArticleProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("idx_article_products_article_id");

                    b.HasIndex("OrderIndex")
                        .HasDatabaseName("idx_article_products_order_index");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_article_products_product_id");

                    b.HasIndex("ArticleId", "ProductId")
                        .IsUnique()
                        .HasDatabaseName("idx_article_products_article_product");

                    b.ToTable("article_products", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ArticleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("article_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("idx_article_tags_article_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("idx_article_tags_tag_id");

                    b.HasIndex("ArticleId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("idx_article_tags_article_tag");

                    b.ToTable("article_tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_brands_is_active");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_brands_slug");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BreadcrumbJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breadcrumb_json");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("canonical_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<bool>("NoFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_follow");

                    b.Property<bool>("NoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_index");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("website")
                        .HasColumnName("og_type");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("SchemaMarkup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schema_markup");

                    b.Property<string>("SitemapChangeFrequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("monthly")
                        .HasColumnName("sitemap_change_frequency");

                    b.Property<double?>("SitemapPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.5)
                        .HasColumnName("sitemap_priority");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("slug");

                    b.Property<string>("TwitterCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("summary_large_image")
                        .HasColumnName("twitter_card");

                    b.Property<string>("TwitterDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("twitter_description");

                    b.Property<string>("TwitterImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("twitter_image");

                    b.Property<string>("TwitterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("twitter_title");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_categories_is_active");

                    b.HasIndex("OrderIndex")
                        .HasDatabaseName("idx_categories_order_index");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("idx_categories_parent_id");

                    b.HasIndex("Type")
                        .HasDatabaseName("idx_categories_type");

                    b.HasIndex("Slug", "Type")
                        .IsUnique()
                        .HasDatabaseName("idx_categories_slug_type");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("admin_notes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("idx_contacts_created_at");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_contacts_email");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_contacts_status");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("domain.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("question");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_faqs_is_active");

                    b.HasIndex("OrderIndex")
                        .HasDatabaseName("idx_faqs_order_index");

                    b.ToTable("faqs", (string)null);
                });

            modelBuilder.Entity("domain.Entities.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("file_extension");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("file_path");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<int>("MediaType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("media_type");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mime_type");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("original_file_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique()
                        .HasDatabaseName("idx_media_files_file_path");

                    b.ToTable("media_files", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UnsubscribedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("unsubscribed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("idx_newsletters_email");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_newsletters_is_active");

                    b.ToTable("newsletters", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationAreas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("application_areas");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<string>("BreadcrumbJson")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("breadcrumb_json");

                    b.Property<string>("CanonicalUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("canonical_url");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("features");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFeatured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_featured");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("meta_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<bool>("NoFollow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_follow");

                    b.Property<bool>("NoIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("no_index");

                    b.Property<string>("OgDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("og_description");

                    b.Property<string>("OgImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("og_image");

                    b.Property<string>("OgTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("og_title");

                    b.Property<string>("OgType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("website")
                        .HasColumnName("og_type");

                    b.Property<string>("Origin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("origin");

                    b.Property<string>("PackagingInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("packaging_info");

                    b.Property<string>("SafetyInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("safety_info");

                    b.Property<string>("SchemaMarkup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schema_markup");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("short_description");

                    b.Property<string>("SitemapChangeFrequency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("monthly")
                        .HasColumnName("sitemap_change_frequency");

                    b.Property<double?>("SitemapPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.5)
                        .HasColumnName("sitemap_priority");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<string>("Specifications")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("specifications");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("status");

                    b.Property<string>("StorageInstructions")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("storage_instructions");

                    b.Property<string>("TechnicalDocuments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("technical_documents");

                    b.Property<string>("TwitterCard")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("summary_large_image")
                        .HasColumnName("twitter_card");

                    b.Property<string>("TwitterDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("twitter_description");

                    b.Property<string>("TwitterImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("twitter_image");

                    b.Property<string>("TwitterTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("twitter_title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("usage");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("view_count");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("idx_products_brand_id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsFeatured")
                        .HasDatabaseName("idx_products_is_featured");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("idx_products_slug");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_products_status");

                    b.HasIndex("ViewCount")
                        .HasDatabaseName("idx_products_view_count");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("alt_text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_main");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("OrderIndex")
                        .HasDatabaseName("idx_product_images_order_index");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_images_product_id");

                    b.HasIndex("ProductId", "IsMain")
                        .HasDatabaseName("idx_product_images_product_main");

                    b.ToTable("product_images", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_tags_product_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("idx_product_tags_tag_id");

                    b.HasIndex("ProductId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("idx_product_tags_product_tag");

                    b.ToTable("product_tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Packaging")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("packaging");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("size");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sku");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_product_variants_is_active");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("idx_product_variants_product_id");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("idx_product_variants_sku");

                    b.ToTable("product_variants", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("key");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("idx_settings_category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_settings_is_active");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("idx_settings_key");

                    b.HasIndex("Type")
                        .HasDatabaseName("idx_settings_type");

                    b.ToTable("settings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5364),
                            DefaultValue = "Đại Minh Việt Nam",
                            Description = "Tên website hiển thị trên trang và tiêu đề trình duyệt.",
                            IsActive = true,
                            Key = "SiteName",
                            Type = 0,
                            Value = "Đại Minh Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5369),
                            DefaultValue = "https://localhost:7001",
                            Description = "Địa chỉ URL chính của website (ví dụ: https://www.example.com).",
                            IsActive = true,
                            Key = "SiteUrl",
                            Type = 7,
                            Value = "https://localhost:7001"
                        },
                        new
                        {
                            Id = 3,
                            Category = "General",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5371),
                            DefaultValue = "sondaiminh@gmail.com",
                            Description = "Địa chỉ email quản trị viên để nhận thông báo hệ thống.",
                            IsActive = true,
                            Key = "AdminEmail",
                            Type = 6,
                            Value = "sondaiminh@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5372),
                            DefaultValue = "Đại Minh Việt Nam",
                            Description = "Tên công ty hoặc tổ chức sở hữu website.",
                            IsActive = true,
                            Key = "CompanyName",
                            Type = 0,
                            Value = "Đại Minh Việt Nam"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5374),
                            DefaultValue = "123 Main Street, Anytown, CA 91234",
                            Description = "Địa chỉ liên hệ đầy đủ.",
                            IsActive = true,
                            Key = "ContactAddress",
                            Type = 1,
                            Value = "123 Main Street, Anytown, CA 91234"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5375),
                            DefaultValue = "(123) 456-7890",
                            Description = "Số điện thoại liên hệ chính.",
                            IsActive = true,
                            Key = "ContactPhone",
                            Type = 4,
                            Value = "(123) 456-7890"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5377),
                            DefaultValue = "contact@example.com",
                            Description = "Địa chỉ email hiển thị công khai để liên hệ.",
                            IsActive = true,
                            Key = "ContactEmail",
                            Type = 6,
                            Value = "contact@example.com"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Contact",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5378),
                            Description = "Mã nhúng HTML của bản đồ (ví dụ: Google Maps iframe).",
                            IsActive = true,
                            Key = "ContactMapEmbed",
                            Type = 2
                        },
                        new
                        {
                            Id = 10,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5380),
                            DefaultValue = "Welcome to My Application",
                            Description = "Tiêu đề meta mặc định cho các trang không có tiêu đề riêng.",
                            IsActive = true,
                            Key = "DefaultMetaTitle",
                            Type = 0,
                            Value = "Welcome to My Application"
                        },
                        new
                        {
                            Id = 11,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5381),
                            DefaultValue = "This is the default description for My Application.",
                            Description = "Mô tả meta mặc định (dưới 160 ký tự).",
                            IsActive = true,
                            Key = "DefaultMetaDescription",
                            Type = 1,
                            Value = "This is the default description for My Application."
                        },
                        new
                        {
                            Id = 12,
                            Category = "SEO",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5382),
                            DefaultValue = "/image/icon.jpg",
                            Description = "Đường dẫn đến file favicon.ico hoặc ảnh favicon.",
                            IsActive = true,
                            Key = "FaviconUrl",
                            Type = 3,
                            Value = "/image/icon.jpg"
                        },
                        new
                        {
                            Id = 13,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5383),
                            Description = "URL trang Facebook.",
                            IsActive = true,
                            Key = "SocialFacebookUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 14,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5384),
                            Description = "URL trang Twitter (X).",
                            IsActive = true,
                            Key = "SocialTwitterUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 15,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5386),
                            Description = "URL trang Instagram.",
                            IsActive = true,
                            Key = "SocialInstagramUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 16,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5387),
                            Description = "URL trang LinkedIn.",
                            IsActive = true,
                            Key = "SocialLinkedInUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 17,
                            Category = "Social Media",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5388),
                            Description = "URL kênh Youtube.",
                            IsActive = true,
                            Key = "SocialYoutubeUrl",
                            Type = 7
                        },
                        new
                        {
                            Id = 18,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5390),
                            DefaultValue = "smtp.example.com",
                            Description = "Địa chỉ máy chủ SMTP.",
                            IsActive = true,
                            Key = "SmtpHost",
                            Type = 0,
                            Value = "smtp.example.com"
                        },
                        new
                        {
                            Id = 19,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5391),
                            DefaultValue = "587",
                            Description = "Cổng SMTP (ví dụ: 587, 465, 25).",
                            IsActive = true,
                            Key = "SmtpPort",
                            Type = 8,
                            Value = "587"
                        },
                        new
                        {
                            Id = 20,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5392),
                            DefaultValue = "user@example.com",
                            Description = "Tên đăng nhập SMTP.",
                            IsActive = true,
                            Key = "SmtpUsername",
                            Type = 0,
                            Value = "user@example.com"
                        },
                        new
                        {
                            Id = 21,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5393),
                            Description = "**QUAN TRỌNG**: Mật khẩu SMTP. Nên cấu hình qua UI, không seed giá trị thật.",
                            IsActive = true,
                            Key = "SmtpPassword",
                            Type = 0
                        },
                        new
                        {
                            Id = 22,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5395),
                            DefaultValue = "true",
                            Description = "Sử dụng mã hóa SSL/TLS khi gửi email.",
                            IsActive = true,
                            Key = "SmtpUseSsl",
                            Type = 9,
                            Value = "true"
                        },
                        new
                        {
                            Id = 23,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5397),
                            DefaultValue = "My Application Support",
                            Description = "Tên hiển thị trong ô 'From' của email gửi đi.",
                            IsActive = true,
                            Key = "EmailFromName",
                            Type = 0,
                            Value = "My Application Support"
                        },
                        new
                        {
                            Id = 24,
                            Category = "Email",
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 110, DateTimeKind.Utc).AddTicks(5398),
                            DefaultValue = "noreply@example.com",
                            Description = "Địa chỉ email hiển thị trong ô 'From' của email gửi đi.",
                            IsActive = true,
                            Key = "EmailFromAddress",
                            Type = 6,
                            Value = "noreply@example.com"
                        });
                });

            modelBuilder.Entity("domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("slug");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .HasDatabaseName("idx_tags_type");

                    b.HasIndex("Slug", "Type")
                        .IsUnique()
                        .HasDatabaseName("idx_tags_slug_type");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("domain.Entities.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientAvatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("client_avatar");

                    b.Property<string>("ClientCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_company");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("client_title");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("OrderIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("order_index");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5)
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_testimonials_is_active");

                    b.HasIndex("OrderIndex")
                        .HasDatabaseName("idx_testimonials_order_index");

                    b.HasIndex("Rating")
                        .HasDatabaseName("idx_testimonials_rating");

                    b.ToTable("testimonials", (string)null);
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_users_email");

                    b.HasIndex("Username")
                        .HasDatabaseName("idx_users_username");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 4, 22, 15, 23, 52, 111, DateTimeKind.Utc).AddTicks(8075),
                            Email = "admin@admin.com",
                            FullName = "Quản trị viên",
                            IsActive = true,
                            PasswordHash = "AQAAAAIAAYagAAAAEBfGdK3hIIfSblPbhjJQS0oSXW3MVf0xhHVcBN0Th3XljAVR+sypTRKQuLKe5cwOSw==",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("domain.Entities.Article", b =>
                {
                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("domain.Entities.ArticleProduct", b =>
                {
                    b.HasOne("domain.Entities.Article", "Article")
                        .WithMany("ArticleProducts")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ArticleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ArticleTag", b =>
                {
                    b.HasOne("domain.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.HasOne("domain.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("domain.Entities.FAQ", b =>
                {
                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("FAQs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.HasOne("domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("domain.Entities.ProductImage", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.ProductTag", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("domain.Entities.Article", b =>
                {
                    b.Navigation("ArticleProducts");

                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("domain.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Children");

                    b.Navigation("FAQs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("domain.Entities.Product", b =>
                {
                    b.Navigation("ArticleProducts");

                    b.Navigation("Images");

                    b.Navigation("ProductTags");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("domain.Entities.Tag", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
