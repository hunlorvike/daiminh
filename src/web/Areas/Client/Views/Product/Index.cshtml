@model web.Areas.Client.Models.Product.ProductViewModel
@{
    ViewData["Title"] = "Sản phẩm";
}

<div class="page-header d-print-none">
    <div class="container-xl">
        <div class="row g-2 align-items-center">
            <div class="col">
                <h2 class="page-title">
                    Danh sách sản phẩm
                </h2>
                <div class="text-muted mt-1">
                    Hiển thị @Model.StartItem-@Model.EndItem trong tổng số @Model.TotalProducts sản phẩm
                </div>
            </div>
            <div class="col-auto ms-auto d-print-none">
                <div class="d-flex">
                    <div class="me-2">
                        <form action="@Url.Action("Index")" method="get" class="d-flex">
                            <div class="input-group">
                                <input type="text" name="search" value="@Model.Search" class="form-control" placeholder="Tìm kiếm sản phẩm...">
                                <button type="submit" class="btn btn-primary">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon m-0" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                        <path d="M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0"></path>
                                        <path d="M21 21l-6 -6"></path>
                                    </svg>
                                </button>
                            </div>
                        </form>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-primary dropdown-toggle align-text-top" data-bs-toggle="dropdown">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24"
                                 viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                 stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path
                                    d="M4 4h16v2.172a2 2 0 0 1 -.586 1.414l-4.414 4.414v7l-6 2v-8.5l-4.414 -4.414a2 2 0 0 1 -.586 -1.414v-2.172z"/>
                            </svg>
                            Sắp xếp
                        </button>
                        <div class="dropdown-menu dropdown-menu-end">
                            <a class="dropdown-item @(Model.SortBy == "newest" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "newest" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M4 6l9 0"/>
                                    <path d="M4 12l7 0"/>
                                    <path d="M4 18l7 0"/>
                                    <path d="M15 15l3 3l3 -3"/>
                                    <path d="M18 6l0 12"/>
                                </svg>
                                Mới nhất
                            </a>
                            <a class="dropdown-item @(Model.SortBy == "oldest" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "oldest" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M4 6l7 0"/>
                                    <path d="M4 12l7 0"/>
                                    <path d="M4 18l9 0"/>
                                    <path d="M15 9l3 -3l3 3"/>
                                    <path d="M18 6l0 12"/>
                                </svg>
                                Cũ nhất
                            </a>
                            <a class="dropdown-item @(Model.SortBy == "name_asc" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "name_asc" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M4 6l7 0"/>
                                    <path d="M4 12l7 0"/>
                                    <path d="M4 18l9 0"/>
                                    <path d="M15 9l3 -3l3 3"/>
                                    <path d="M18 6l0 12"/>
                                </svg>
                                Tên A-Z
                            </a>
                            <a class="dropdown-item @(Model.SortBy == "name_desc" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "name_desc" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M4 6l9 0"/>
                                    <path d="M4 12l7 0"/>
                                    <path d="M4 18l7 0"/>
                                    <path d="M15 15l3 3l3 -3"/>
                                    <path d="M18 6l0 12"/>
                                </svg>
                                Tên Z-A
                            </a>
                            <a class="dropdown-item @(Model.SortBy == "price_asc" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "price_asc" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M3 9l4 -4l4 4m-4 -4v14"/>
                                    <path d="M21 12h-4a2 2 0 0 0 0 4h1a2 2 0 0 1 0 4h-4"/>
                                    <path d="M17 8v-3"/>
                                    <path d="M17 21v-3"/>
                                </svg>
                                Giá thấp đến cao
                            </a>
                            <a class="dropdown-item @(Model.SortBy == "price_desc" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "price_desc" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path d="M3 15l4 4l4 -4m-4 4v-14"/>
                                    <path d="M21 12h-4a2 2 0 0 0 0 4h1a2 2 0 0 1 0 4h-4"/>
                                    <path d="M17 8v-3"/>
                                    <path d="M17 21v-3"/>
                                </svg>
                                Giá cao đến thấp
                            </a>
                            <a class="dropdown-item @(Model.SortBy == "popular" ? "active" : "")" href="@Url.Action("Index", new { sortBy = "popular" })">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24"
                                     height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                     stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                    <path
                                        d="M19.5 12.572l-7.5 7.428l-7.5 -7.428a5 5 0 1 1 7.5 -6.566a5 5 0 1 1 7.5 6.572"/>
                                </svg>
                                Phổ biến nhất
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="page-body">
    <div class="container-xl">
        <div class="row">
            <!-- Sidebar with filters -->
            <div class="col-lg-3">
                <form id="filterForm" method="get" action="@Url.Action("Index")">
                    <input type="hidden" name="sortBy" value="@Model.SortBy" />
                    <input type="hidden" name="page" value="1" />
                    
                    <!-- Loại sản phẩm -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h3 class="card-title">Loại sản phẩm</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                @foreach (var productType in Model.ProductTypes)
                                {
                                    <label class="form-check">
                                        <input type="checkbox" class="form-check-input product-type-checkbox" 
                                               name="productTypeIds" value="@productType.Id"
                                               @(Model.SelectedProductTypeIds.Contains(productType.Id) ? "checked" : "")
                                               data-product-type-id="@productType.Id">
                                        <span class="form-check-label">@productType.Name</span>
                                    </label>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <!-- Khoảng giá -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h3 class="card-title">Khoảng giá</h3>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="row g-2">
                                    <div class="col">
                                        <input type="number" name="minPrice" value="@Model.MinPrice" class="form-control" 
                                               placeholder="Từ" min="@Model.MinAvailablePrice" max="@Model.MaxAvailablePrice">
                                    </div>
                                    <div class="col-auto">-</div>
                                    <div class="col">
                                        <input type="number" name="maxPrice" value="@Model.MaxPrice" class="form-control" 
                                               placeholder="Đến" min="@Model.MinAvailablePrice" max="@Model.MaxAvailablePrice">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Nút áp dụng bộ lọc -->
                    <div class="d-flex gap-2 mb-4">
                        <button type="submit" class="btn btn-primary w-100">
                            Áp dụng bộ lọc
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                            Đặt lại
                        </a>
                    </div>
                </form>
            </div>
            
            <!-- Product grid -->
            <div class="col-lg-9">
                @if (!Model.Products.Any())
                {
                    <div class="empty">
                        <div class="empty-icon">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-shopping-cart" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M6 19m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
                                <path d="M17 19m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
                                <path d="M17 17h-11v-14h-2"></path>
                                <path d="M6 5l14 1l-1 7h-13"></path>
                            </svg>
                        </div>
                        <p class="empty-title">Không tìm thấy sản phẩm nào</p>
                        <p class="empty-subtitle text-muted">
                            Hãy thử tìm kiếm với từ khóa khác hoặc xóa bộ lọc hiện tại.
                        </p>
                        <div class="empty-action">
                            <a href="@Url.Action("Index")" class="btn btn-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                    <path d="M9 13l-4 -4l4 -4m-4 4h11a4 4 0 0 1 0 8h-1"></path>
                                </svg>
                                Xem tất cả sản phẩm
                            </a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row row-cards">
                        @foreach (var product in Model.Products)
                        {
                            <div class="col-sm-6 col-lg-4">
                                <div class="card card-sm">
                                    <div class="card-body">
                                        <div class="img-responsive img-responsive-3x2 card-img-top mb-3" style="background-image: url('@(product.Images != null && product.Images.Any(i => i.IsPrimary) ? product.Images.First(i => i.IsPrimary).ImageUrl : (product.Images != null && product.Images.Any() ? product.Images.First().ImageUrl : "/img/placeholder.svg"))')"></div>
                                        <h3 class="card-title">
                                            <a href="@Url.Action("Detail", new { id = product.Id })">@product.Name</a>
                                        </h3>
                                        <div class="text-muted">@product.ProductType?.Name</div>
                                        <div class="mt-3">
                                            @if (product.ProductCategories != null && product.ProductCategories.Any())
                                            {
                                                foreach (var pc in product.ProductCategories.Take(3))
                                                {
                                                    <span class="badge bg-blue-lt me-1">@pc.Category?.Name</span>
                                                }
                                            }
                                        </div>
                                        <div class="mt-3 d-flex align-items-center">
                                            <div class="h3 mb-0 me-auto">
                                                    @product.BasePrice.ToString("N0") ₫
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <div class="d-flex justify-content-center mt-5">
                            <div class="card">
                                <div class="card-body">
                                    <ul class="pagination pagination-separated">
                                        @if (Model.CurrentPage > 1)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Index", new { 
                                                    page = Model.CurrentPage - 1, 
                                                    search = Model.Search,
                                                    sortBy = Model.SortBy,
                                                    categoryIds = Model.SelectedCategoryIds,
                                                    tagIds = Model.SelectedTagIds,
                                                    productTypeIds = Model.SelectedProductTypeIds,
                                                    minPrice = Model.MinPrice,
                                                    maxPrice = Model.MaxPrice,
                                                })">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                                        <path d="M15 6l-6 6l6 6"></path>
                                                    </svg>
                                                    Trước
                                                </a>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item disabled">
                                                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                                        <path d="M15 6l-6 6l6 6"></path>
                                                    </svg>
                                                    Trước
                                                </a>
                                            </li>
                                        }

                                        @{
                                            const int maxPagesToShow = 5;
                                            int startPage = Math.Max(1, Model.CurrentPage - maxPagesToShow / 2);
                                            int endPage = Math.Min(Model.TotalPages, startPage + maxPagesToShow - 1);

                                            if (endPage - startPage + 1 < maxPagesToShow)
                                            {
                                                startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                                            }
                                        }

                                        @if (startPage > 1)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Index", new { 
                                                    page = 1, 
                                                    search = Model.Search,
                                                    sortBy = Model.SortBy,
                                                    categoryIds = Model.SelectedCategoryIds,
                                                    tagIds = Model.SelectedTagIds,
                                                    productTypeIds = Model.SelectedProductTypeIds,
                                                    minPrice = Model.MinPrice,
                                                    maxPrice = Model.MaxPrice,
                                                })">1</a>
                                            </li>
                                            @if (startPage > 2)
                                            {
                                                <li class="page-item disabled">
                                                    <span class="page-link">...</span>
                                                </li>
                                            }
                                        }

                                        @for (int i = startPage; i <= endPage; i++)
                                        {
                                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Index", new { 
                                                    page = i, 
                                                    search = Model.Search,
                                                    sortBy = Model.SortBy,
                                                    categoryIds = Model.SelectedCategoryIds,
                                                    tagIds = Model.SelectedTagIds,
                                                    productTypeIds = Model.SelectedProductTypeIds,
                                                    minPrice = Model.MinPrice,
                                                    maxPrice = Model.MaxPrice,
                                                })">@i</a>
                                            </li>
                                        }

                                        @if (endPage < Model.TotalPages)
                                        {
                                            @if (endPage < Model.TotalPages - 1)
                                            {
                                                <li class="page-item disabled">
                                                    <span class="page-link">...</span>
                                                </li>
                                            }
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Index", new { 
                                                    page = Model.TotalPages, 
                                                    search = Model.Search,
                                                    sortBy = Model.SortBy,
                                                    categoryIds = Model.SelectedCategoryIds,
                                                    tagIds = Model.SelectedTagIds,
                                                    productTypeIds = Model.SelectedProductTypeIds,
                                                    minPrice = Model.MinPrice,
                                                    maxPrice = Model.MaxPrice,
                                                })">@Model.TotalPages</a>
                                            </li>
                                        }

                                        @if (Model.CurrentPage < Model.TotalPages)
                                        {
                                            <li class="page-item">
                                                <a class="page-link" href="@Url.Action("Index", new { 
                                                    page = Model.CurrentPage + 1, 
                                                    search = Model.Search,
                                                    sortBy = Model.SortBy,
                                                    categoryIds = Model.SelectedCategoryIds,
                                                    tagIds = Model.SelectedTagIds,
                                                    productTypeIds = Model.SelectedProductTypeIds,
                                                    minPrice = Model.MinPrice,
                                                    maxPrice = Model.MaxPrice,
                                                })">
                                                    Sau
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                                        <path d="M9 6l6 6l-6 6"></path>
                                                    </svg>
                                                </a>
                                            </li>
                                        }
                                        else
                                        {
                                            <li class="page-item disabled">
                                                <a class="page-link" href="#">
                                                    Sau
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                                        <path d="M9 6l6 6l-6 6"></path>
                                                    </svg>
                                                </a>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section FootScripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Xử lý hiển thị thêm thẻ
            const showMoreTagsBtn = document.getElementById('showMoreTags');
            const moreTagsContainer = document.getElementById('moreTags');
            
            if (showMoreTagsBtn && moreTagsContainer) {
                showMoreTagsBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    if (moreTagsContainer.style.display === 'none') {
                        moreTagsContainer.style.display = 'block';
                        showMoreTagsBtn.textContent = 'Ẩn bớt thẻ';
                    } else {
                        moreTagsContainer.style.display = 'none';
                        showMoreTagsBtn.textContent = 'Xem thêm thẻ';
                    }
                });
            }
            
            // Xử lý hiển thị trường động theo loại sản phẩm
            const productTypeCheckboxes = document.querySelectorAll('.product-type-checkbox');
            const fieldDefinitionCards = document.querySelectorAll('.field-definition-card');
            
            function updateFieldDefinitions() {
                // Lấy danh sách các loại sản phẩm đã chọn
                const selectedProductTypeIds = Array.from(productTypeCheckboxes)
                    .filter(checkbox => checkbox.checked)
                    .map(checkbox => checkbox.dataset.productTypeId);
                
                // Nếu không có loại sản phẩm nào được chọn, hiển thị tất cả trường động
                if (selectedProductTypeIds.length === 0) {
                    fieldDefinitionCards.forEach(card => {
                        card.style.display = 'block';
                    });
                    return;
                }
                
                // Hiển thị/ẩn các trường động dựa trên loại sản phẩm đã chọn
                fieldDefinitionCards.forEach(card => {
                    const fieldProductTypeId = card.dataset.productTypeId;
                    
                    if (selectedProductTypeIds.includes(fieldProductTypeId)) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }
            
            // Cập nhật trường động khi trang tải
            updateFieldDefinitions();
            
            // Cập nhật trường động khi thay đổi loại sản phẩm
            productTypeCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateFieldDefinitions);
            });
            
            // Xử lý thêm vào giỏ hàng và yêu thích bằng AJAX
            const addToCartForms = document.querySelectorAll('form[action*="AddToCart"]');
            const addToWishlistForms = document.querySelectorAll('form[action*="AddToWishlist"]');
            
            addToCartForms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    fetch(form.action, {
                        method: 'POST',
                        body: new FormData(form),
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const button = form.querySelector('button[type="submit"]');
                            button.classList.add('active');
                            
                            // Hiển thị thông báo
                            alert(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            });
            
            addToWishlistForms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    fetch(form.action, {
                        method: 'POST',
                        body: new FormData(form),
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const button = form.querySelector('button[type="submit"]');
                            
                            if (data.inWishlist) {
                                button.classList.add('active');
                            } else {
                                button.classList.remove('active');
                            }
                            
                            // Hiển thị thông báo
                            alert(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });
                });
            });
        });
    </script>
}