@using web.Areas.Admin.ViewModels.Testimonial
@model TestimonialViewModel
@{
	ViewData["Title"] = "Chỉnh sửa đánh giá khách hàng - Hệ thống quản trị";
}
@section Styles {
	<link rel="stylesheet" href="~/css/summernote.css" />
}
<div class="card">
	<div class="card-header">
		<h3 class="card-title">Thông tin đánh giá khách hàng</h3>
	</div>
	<div class="card-body">
		<form asp-action="Edit" method="post">
			<div asp-validation-summary="ModelOnly" class="text-danger alert alert-danger"></div>
			<input type="hidden" asp-for="Id" />
			@Html.AntiForgeryToken()

			<partial name="_TestimonialFormFields" model="Model" />

			<div class="d-flex justify-content-between mt-4">
				<a asp-action="Index" class="btn btn-link">
					<i class="ti ti-arrow-left me-2"></i> Quay lại
				</a>
				<button type="submit" class="btn btn-primary">
					<i class="ti ti-device-floppy me-2"></i> Cập nhật đánh giá
				</button>
			</div>
		</form>
	</div>
</div>

@section Scripts {
	<script>
		// Rating stars functionality (same as Create)
		function updateStars(rating) {
			const $ratingStarsContainer = $('#ratingStars');
			if (!$ratingStarsContainer.length) return;
			$ratingStarsContainer.empty();
			for (let i = 1; i <= 5; i++) {
				const starClass = i <= rating ? 'ti ti-star-filled text-warning' : 'ti ti-star text-warning';
				$ratingStarsContainer.append(`<i class="${starClass} me-1"></i>`);
			}
		}

		$(document).ready(function() {
			// Initialize Summernote (if not globally initialized)
			$('.summernote').summernote({
					lang: 'vi-VN',
					height: 150,
			});

			// Rating slider initialization
			const ratingSlider = document.getElementById('ratingSlider');
			if (ratingSlider) {
				let initialRating = parseInt(ratingSlider.value);
				if (isNaN(initialRating) || initialRating < 1 || initialRating > 5) {
					initialRating = 5; // Default or keep existing valid value
					ratingSlider.value = initialRating;
				}
				updateStars(initialRating); // Update stars on load

				ratingSlider.addEventListener('input', function() {
					updateStars(parseInt(this.value));
				});
			}

			// Standard image selection setup function (copied from Create)
			function setupImageSelection(selectBtnId, removeBtnId, previewId, inputId, storeFullPath = false, defaultImgSrc = '/img/placeholder.svg') {
				const selectBtn = $(`#${selectBtnId}`);
				const removeBtn = $(`#${removeBtnId}`);
				const preview = $(`#${previewId}`);
				const input = $(`#${inputId}`);

				function handleSelection(selectedFile) {
					if (selectedFile && selectedFile.url) {
						preview.attr('src', selectedFile.url).show();
						input.val(storeFullPath ? selectedFile.url : selectedFile.path).trigger('change');
						removeBtn.removeClass('d-none');
					} else {
						console.warn("Selected file object is missing 'url' or 'path'.", selectedFile);
						preview.attr('src', defaultImgSrc).show();
						input.val('').trigger('change');
						removeBtn.addClass('d-none');
					}
				}

				selectBtn.on('click', function() {
					if (typeof window.openMediaSelectionModal === 'function') {
						window.openMediaSelectionModal(handleSelection, 'Image');
					} else {
						console.error('window.openMediaSelectionModal function is not defined.');
						alert('Lỗi: Chức năng chọn media chưa sẵn sàng.');
					}
				});

				removeBtn.on('click', function() {
					preview.attr('src', defaultImgSrc).show();
					input.val('').trigger('change');
					$(this).addClass('d-none');
				});

				// Initial state on load
				if (input.val() === '') {
					preview.attr('src', defaultImgSrc).show();
					removeBtn.addClass('d-none');
				} else {
					 preview.show();
					 removeBtn.removeClass('d-none');
				}
			}

			// --- Thiết lập cho Ảnh đại diện (ClientAvatar - Lưu Path) ---
			setupImageSelection(
				'selectImageBtn',      // Standard ID
				'removeImageBtn',      // Standard ID
				'imagePreview',        // Standard ID
				'imagePathInput',      // Standard ID
				false                  // Lưu Path (false)
			);

		});
	</script>
}