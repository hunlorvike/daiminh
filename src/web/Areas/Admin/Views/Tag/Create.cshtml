@using web.Areas.Admin.ViewModels.Tag
@using shared.Enums
@using shared.Extensions
@model TagViewModel

@{
    ViewData["Title"] = "Thêm Thẻ mới - Hệ thống quản trị";
    ViewData["PageTitle"] = "Thêm Thẻ mới";
    ViewData["Breadcrumbs"] = new List<(string Text, string Url)> {
            ("Thẻ", Url.Action(nameof(Index)) ?? "/Admin/Tag"),
            ("Thêm mới", "")
        };
}

<form asp-action="Create" method="post">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">
                <i class="ti ti-tag-plus me-2"></i>Thông tin Thẻ mới
            </h3>
        </div>
        <div class="card-body">
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger alert alert-danger mb-3" role="alert"></div>
            
            <partial name="_TagFormFields" model="Model" />
        </div>
        <div class="card-footer d-flex justify-content-end bg-transparent border-top pt-3">
            <a asp-action="Index" class="btn btn-link">
                <i class="ti ti-x me-1"></i>Hủy
            </a>
            <button type="submit" class="btn btn-primary ms-2">
                <i class="ti ti-device-floppy me-2"></i>Lưu Thẻ
            </button>
        </div>
    </div>
</form>

@section Scripts {
    <script src="~/js/slug.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize slug generator
            const slugManager = SlugManager.init({
                nameInput: '#Name',
                slugInput: '#Slug',
                generateButton: '#generateSlugButton'
            });

            // Auto-generate slug if name is filled but slug is empty
            if ($('#Name').val() && !$('#Slug').val()) {
                slugManager.generateSlug();
            }
            
            // Add visual feedback when generating slug
            $('#generateSlugButton').on('click', function() {
                const $button = $(this);
                const $icon = $button.find('i');
                
                // Store original icon class
                const originalClass = $icon.attr('class');
                
                // Change to spinner
                $icon.attr('class', 'ti ti-loader animate-spin');
                
                // Restore after a short delay
                setTimeout(function() {
                    $icon.attr('class', originalClass);
                    
                    // Show success feedback
                    $button.removeClass('btn-outline-secondary').addClass('btn-success');
                    setTimeout(function() {
                        $button.removeClass('btn-success').addClass('btn-outline-secondary');
                    }, 1000);
                }, 300);
            });
        });
    </script>
}