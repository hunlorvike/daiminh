@using System.Globalization
@using web.Areas.Admin.ViewModels.Setting
@using shared.Enums
@using shared.Extensions;
@model SettingsIndexViewModel

@{
	ViewData["Title"] = "Quản lý Cài đặt Hệ thống";
	ViewData["PageTitle"] = "Cài đặt Hệ thống";
	ViewData["Breadcrumbs"] = new List<(string Text, string Url)> {
		("Cài đặt", "")
	};
}

<form asp-action="Update" method="post">
	@Html.AntiForgeryToken()

	@if (ViewData.ModelState.Any(x => x.Key == ""))
	{
		<div class="alert alert-danger alert-dismissible fade show" role="alert">
			<h4 class="alert-heading">Cập nhật thất bại!</h4>
			<div asp-validation-summary="ModelOnly" class="mb-0"></div>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	}
	@if (TempData["SuccessMessage"] != null)
	{
		<div class="alert alert-success alert-dismissible fade show" role="alert">
			@TempData["SuccessMessage"]
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	}
	@if (TempData["ErrorMessage"] != null)
	{
		<div class="alert alert-danger alert-dismissible fade show" role="alert">
			@TempData["ErrorMessage"]
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	}
	@if (TempData["InfoMessage"] != null)
	{
		<div class="alert alert-info alert-dismissible fade show" role="alert">
			@TempData["InfoMessage"]
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	}

	<div class="card mb-3">
		<div class="card-body">
			<div class="row">
				<div class="col-md-6">
					<label asp-for="SearchTerm" class="form-label"></label>
					<input asp-for="SearchTerm" class="form-control" placeholder="Nhập khóa hoặc mô tả để lọc..." />
				</div>
				<div class="col-md-3 align-self-end">
					<button type="submit" formaction="@Url.Action("Index")" formmethod="get" class="btn btn-primary w-100">
						<i class="ti ti-filter me-1"></i> Lọc
					</button>
				</div>
				<div class="col-md-3 align-self-end">
					<a asp-action="Index" class="btn btn-outline-secondary w-100">
						<i class="ti ti-reload me-2"></i> Đặt lại
					</a>
				</div>
			</div>
		</div>
	</div>

	@{
		var settingGroupsList = Model.SettingGroups.ToList();
	}

	@for (int i = 0; i < settingGroupsList.Count; i++)
	{
		var group = settingGroupsList[i];
		var categoryName = group.Key;
		var settingsInGroup = group.Value;

		<div class="card mb-4">
			<div class="card-header">
				<h3 class="card-title mb-0">@categoryName</h3>
			</div>
			<div class="card-body">
				@for (int j = 0; j < settingsInGroup.Count; j++)
				{
					var setting = settingsInGroup[j];
					var valueFieldName = $"SettingGroups[{categoryName}][{j}].Value";
					var idFieldName = $"SettingGroups[{categoryName}][{j}].Id";
					var keyFieldName = $"SettingGroups[{categoryName}][{j}].Key";
					var typeFieldName = $"SettingGroups[{categoryName}][{j}].Type";
					var descFieldName = $"SettingGroups[{categoryName}][{j}].Description";

					var nameSelector = $"input[name=\"{valueFieldName}\"]";

					<div class="mb-3 row">
						<label for="@valueFieldName" class="col-sm-3 col-form-label">
							@setting.Key
							@if (!string.IsNullOrEmpty(setting.Description))
							{
								<i class="ti ti-help text-muted ms-1" data-bs-toggle="tooltip" data-bs-placement="top" title="@setting.Description"></i>
							}
						</label>
						<div class="col-sm-9">
							@if (setting.Type == FieldType.TextArea || setting.Type == FieldType.Html)
							{
								<textarea asp-for="@Model.SettingGroups[categoryName][j].Value" name="@valueFieldName" id="@valueFieldName" class="form-control @(setting.Type == FieldType.Html ? "html-editor" : "")" rows="3"></textarea>
							}
							else if (setting.Type == FieldType.Boolean)
							{
								List<SelectListItem> booleanOptions = new()
					{
					new SelectListItem { Value = "true", Text = "Có / Bật" },
					new SelectListItem { Value = "false", Text = "Không / Tắt" }
					};
								<select asp-for="@Model.SettingGroups[categoryName][j].Value" name="@valueFieldName" id="@valueFieldName" class="form-select" asp-items="booleanOptions">
								</select>
							}
							else if (setting.Type == FieldType.Image)
							{
								<div class="input-group">
									<input type="text" asp-for="@Model.SettingGroups[categoryName][j].Value" name="@valueFieldName" id="@valueFieldName" class="form-control" placeholder="Nhập đường dẫn ảnh...">
									<button type="button" class="btn btn-outline-secondary select-media-btn" data-target-input="@nameSelector" title="Chọn ảnh">
										<i class="ti ti-photo-search"></i>
									</button>
									<button type="button" class="btn btn-outline-danger remove-media-btn @(string.IsNullOrEmpty(Model.SettingGroups[categoryName][j].Value) ? "d-none" : "")" data-target-input="@nameSelector" title="Xóa">
										<i class="ti ti-x"></i>
									</button>
								</div>
							}
							else if (setting.Type == FieldType.Color)
							{
								<div class="input-group colorpicker-component">
									<input type="text" asp-for="@Model.SettingGroups[categoryName][j].Value" name="@valueFieldName" id="@valueFieldName" class="form-control" />
									<span class="input-group-text input-group-addon"><i></i></span>
								</div>
							}
							else if (setting.Type == FieldType.Date)
							{
								string formattedDateValue = string.Empty;
								if (DateTime.TryParse(setting.Value, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateValue))
								{
									formattedDateValue = dateValue.ToString("yyyy-MM-dd");
								}
								else if (!string.IsNullOrEmpty(setting.Value))
								{
									formattedDateValue = setting.Value;
								}

								<input type="date" value="@formattedDateValue" name="@valueFieldName" id="@valueFieldName" class="form-control" />
							}
							else
							{
								var inputType = setting.Type switch
								{
									FieldType.Email => "email",
									FieldType.Url => "url",
									FieldType.Number => "number",
									FieldType.Phone => "tel",
									_ => "text"
								};
								var step = (setting.Type == FieldType.Number) ? "any" : null;

								<input type="@inputType" step="@step" asp-for="@Model.SettingGroups[categoryName][j].Value" name="@valueFieldName" id="@valueFieldName" class="form-control" />
							}

							<input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Id" name="@idFieldName" />
							<input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Key" name="@keyFieldName" />
							<input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Type" name="@typeFieldName" />
							<input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Description" name="@descFieldName" />

							<span asp-validation-for="@Model.SettingGroups[categoryName][j].Value" class="text-danger"></span>
						</div>
					</div>
				}
			</div>
		</div>
	}

	<div class="card">
		<div class="card-footer text-end bg-transparent border-top pt-3">
			<button type="submit" class="btn btn-primary">
				<i class="ti ti-device-floppy me-2"></i> Lưu tất cả thay đổi
			</button>
		</div>
	</div>

</form>

@section Scripts {
	<script>
		$(document).ready(function() {

			$('.html-editor').summernote({
				placeholder: 'Nhập nội dung HTML...',
				height: 200,
			});

			function handleMediaSelection(selectedFile, $input) {
				if (selectedFile && selectedFile.path && $input && $input.length) {
					$input.val(selectedFile.path).trigger('change');
					$input.closest('.input-group').find('.remove-media-btn').removeClass('d-none');
				} else {
					 console.warn('handleMediaSelection received invalid data or input element.');
				}
			}

			$(document).on('click', '.select-media-btn', function() {
				const targetInputSelector = $(this).data('target-input');
				if (!targetInputSelector) {
					console.error('Select Media button is missing data-target-input attribute.');
					return;
				}
				const $input = $(targetInputSelector);
				console.log('Target input for media selection:', $input);

				if (!$input.length) {
						console.error('Target input element not found using selector:', targetInputSelector);
						return;
				}

				if (typeof window.openMediaSelectionModal === 'function') {
					const callback = (selectedFile) => {
							handleMediaSelection(selectedFile, $input);
						};
					window.openMediaSelectionModal(callback, 'Image');
				} else {
					console.error('window.openMediaSelectionModal function is not defined.');
				}
			});

			$(document).on('click', '.remove-media-btn', function() {
				const targetInputSelector = $(this).data('target-input');
					if (!targetInputSelector) {
					console.error('Remove Media button is missing data-target-input attribute.');
					return;
				}
				const $input = $(targetInputSelector);

				if ($input.length) {
					$input.val('').trigger('change');
					$(this).addClass('d-none');
					console.log('Media removed from input using selector:', targetInputSelector);
				} else {
						console.error('Target input element not found for removal using selector:', targetInputSelector);
				}
			});
		});
	</script>
}