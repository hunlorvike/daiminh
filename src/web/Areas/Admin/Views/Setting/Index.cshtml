@using web.Areas.Admin.ViewModels.Setting
@model SettingsIndexViewModel

@{
    ViewData["Title"] = "Quản lý Cài đặt Hệ thống";
    ViewData["PageTitle"] = "Cài đặt Hệ thống";
    ViewData[TempDataConstants.Breadcrumbs] = new List<(string Text, string Url)> {
        ("Cài đặt", "")
    };
}

@section PageActions {
    <div class="btn-list">
        <button type="submit" form="settingsForm" class="btn btn-primary d-none d-sm-inline-block">
            <i class="ti ti-device-floppy me-2"></i> Lưu tất cả thay đổi
        </button>
        <button type="submit" form="settingsForm" class="btn btn-primary d-sm-none btn-icon">
            <i class="ti ti-device-floppy"></i>
        </button>
    </div>
}

<form asp-action="Update" method="post" id="settingsForm">
    @Html.AntiForgeryToken()

    @if (ViewData.ModelState.Any(x => x.Key == ""))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <div class="d-flex">
                <div class="alert-icon">
                    <i class="ti ti-alert-circle"></i>
                </div>
                <div>
                    <h4 class="alert-title mb-0">Cập nhật thất bại!</h4>
                    <div asp-validation-summary="ModelOnly" class="mb-0"></div>
                </div>
            </div>
            <a class="btn-close" data-bs-dismiss="alert" aria-label="close"></a>
        </div>
    }
    
    <div class="card mb-3">
        <div class="card-header">
            <h3 class="card-title">
                <i class="ti ti-filter me-2"></i>Lọc cài đặt
            </h3>
        </div>
        <div class="card-body">
            <div class="row g-3 align-items-end">
                <div class="col-md-6 col-sm-12">
                    <div class="form-group">
                        <label asp-for="SearchTerm" class="form-label"></label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="ti ti-search"></i>
                            </span>
                            <input asp-for="SearchTerm" class="form-control" placeholder="Nhập khóa hoặc mô tả để lọc..." />
                            @if (!string.IsNullOrEmpty(Model.SearchTerm))
                            {
                                <button type="button" class="btn btn-icon" id="clearSearch" title="Xóa tìm kiếm">
                                    <i class="ti ti-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <button type="submit" formaction="@Url.Action("Index")" formmethod="get" class="btn btn-primary w-100">
                        <i class="ti ti-filter me-1 d-none d-sm-inline-block"></i> Lọc
                    </button>
                </div>
                <div class="col-md-3 col-6">
                    <a asp-action="Index" class="btn btn-outline-secondary w-100">
                        <i class="ti ti-reload me-1 d-none d-sm-inline-block"></i> Đặt lại
                    </a>
                </div>
            </div>
        </div>
    </div>

    @{
        var settingGroupsList = Model.SettingGroups.ToList();
    }

    @if (!settingGroupsList.Any())
    {
        <div class="card">
            <div class="card-body">
                <div class="empty py-5">
                    <div class="empty-icon">
                        <div class="avatar avatar-xl bg-light-subtle rounded">
                            <i class="ti ti-settings-off fs-1 text-muted"></i>
                        </div>
                    </div>
                    <p class="empty-title mt-3">Không tìm thấy cài đặt nào</p>
                    <p class="empty-subtitle text-muted">
                        Không có cài đặt nào khớp với tiêu chí tìm kiếm của bạn.
                    </p>
                    <div class="empty-action">
                        <a asp-action="Index" class="btn btn-primary">
                            <i class="ti ti-reload me-2"></i> Đặt lại bộ lọc
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row row-cards">
            <div class="col-12 mb-3">
                <div class="card">
                    <div class="card-header">
                        <ul class="nav nav-tabs card-header-tabs" data-bs-toggle="tabs" role="tablist">
                            @for (int i = 0; i < settingGroupsList.Count; i++)
                            {
                                var group = settingGroupsList[i];
                                var categoryName = group.Key;
                                var isActive = i == 0;
                                var categorySlug = categoryName.ToLower().Replace(" ", "-");
                                
                                <li class="nav-item" role="presentation">
                                    <a href="#@categorySlug" class="nav-link @(isActive ? "active" : "")" data-bs-toggle="tab" role="tab" aria-selected="@(isActive ? "true" : "false")">
                                        @Html.Raw(GetCategoryIcon(categoryName))
                                        <span class="d-none d-sm-inline ms-2">@categoryName</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content">
                            @for (int i = 0; i < settingGroupsList.Count; i++)
                            {
                                var group = settingGroupsList[i];
                                var categoryName = group.Key;
                                var settingsInGroup = group.Value;
                                var isActive = i == 0;
                                var categorySlug = categoryName.ToLower().Replace(" ", "-");
                                
                                <div class="tab-pane @(isActive ? "active show" : "")" id="@categorySlug" role="tabpanel">
                                    <h3 class="card-title mb-3">
 										@Html.Raw(GetCategoryIcon(categoryName))
                                         <span class="ms-2">@categoryName</span>
                                    </h3>
                                    
                                    <div class="divide-y">
                                        @for (int j = 0; j < settingsInGroup.Count; j++)
                                        {
                                            var setting = settingsInGroup[j];
                                            var valueFieldName = $"SettingGroups[{categoryName}][{j}].Value";
                                            var idFieldName = $"SettingGroups[{categoryName}][{j}].Id";
                                            var keyFieldName = $"SettingGroups[{categoryName}][{j}].Key";
                                            var typeFieldName = $"SettingGroups[{categoryName}][{j}].Type";
                                            var descFieldName = $"SettingGroups[{categoryName}][{j}].Description";

                                            var nameSelector = $"input[name=\"{valueFieldName}\"]";
                                            var settingId = $"setting-{categorySlug}-{j}";

                                            <div class="py-3 @(j == 0 ? "pt-0" : "") @(j == settingsInGroup.Count - 1 ? "pb-0" : "")">
                                                <div class="mb-2 row g-3 align-items-center">
                                                    <div class="col-md-4 col-sm-12">
                                                        <label for="@settingId" class="form-label mb-0 fw-medium">
                                                            @Html.Raw(GetSettingIcon(setting.Type))
                                                            <span class="ms-2">@setting.Key</span>
                                                        </label>
                                                        @if (!string.IsNullOrEmpty(setting.Description))
                                                        {
                                                            <div class="text-muted small mt-1">@setting.Description</div>
                                                        }
                                                    </div>
                                                    <div class="col-md-8 col-sm-12">
                                                        @if (setting.Type == FieldType.TextArea || setting.Type == FieldType.Html)
                                                        {
                                                            <textarea asp-for="@Model.SettingGroups[categoryName][j].Value" 
                                                                name="@valueFieldName" 
                                                                id="@settingId" 
                                                                class="form-control @(setting.Type == FieldType.Html ? "wysiwyg" : "")" 
                                                                rows="3"></textarea>
                                                        }
                                                        else if (setting.Type == FieldType.Boolean)
                                                        {
                                                            List<SelectListItem> booleanOptions = new()
                                                            {
                                                                new SelectListItem { Value = "true", Text = "Có / Bật" },
                                                                new SelectListItem { Value = "false", Text = "Không / Tắt" }
                                                            };
                                                            <div class="input-group">
                                                                <span class="input-group-text">
                                                                    <i class="ti ti-toggle-right"></i>
                                                                </span>
                                                                <select asp-for="@Model.SettingGroups[categoryName][j].Value" 
                                                                    name="@valueFieldName" 
                                                                    id="@settingId" 
                                                                    class="form-select tom-selected" 
                                                                    asp-items="booleanOptions">
                                                                </select>
                                                            </div>
                                                        }
                                                        else if (setting.Type == FieldType.Image)
                                                        {
                                                            <div class="row g-2 align-items-center">
                                                                <div class="col">
                                                                    <div class="input-group">
                                                                        <span class="input-group-text">
                                                                            <i class="ti ti-photo"></i>
                                                                        </span>
                                                                        <input type="text" 
                                                                            asp-for="@Model.SettingGroups[categoryName][j].Value" 
                                                                            name="@valueFieldName" 
                                                                            id="@settingId" 
                                                                            class="form-control" 
                                                                            placeholder="Nhập đường dẫn ảnh...">
                                                                        <button type="button" 
                                                                            class="btn btn-outline-primary select-media-btn" 
                                                                            data-target-input="@nameSelector" 
                                                                            title="Chọn ảnh">
                                                                            <i class="ti ti-photo-search"></i>
                                                                        </button>
                                                                        <button type="button" 
                                                                            class="btn btn-outline-danger remove-media-btn @(string.IsNullOrEmpty(Model.SettingGroups[categoryName][j].Value) ? "d-none" : "")" 
                                                                            data-target-input="@nameSelector" 
                                                                            title="Xóa">
                                                                            <i class="ti ti-x"></i>
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                                @if (!string.IsNullOrEmpty(Model.SettingGroups[categoryName][j].Value))
                                                                {
                                                                    <div class="col-auto">
                                                                        <div class="avatar avatar-md" id="preview-@settingId">
                                                                            <img src="@Model.SettingGroups[categoryName][j].Value" class="avatar-img rounded" alt="Preview">
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else if (setting.Type == FieldType.Color)
                                                        {
                                                            <div class="input-group colorpicker-component">
                                                                <span class="input-group-text">
                                                                    <i class="ti ti-palette"></i>
                                                                </span>
                                                                <input type="text" 
                                                                    asp-for="@Model.SettingGroups[categoryName][j].Value" 
                                                                    name="@valueFieldName" 
                                                                    id="@settingId" 
                                                                    class="form-control" />
                                                                <span class="input-group-text input-group-addon">
                                                                    <i style="background-color: @Model.SettingGroups[categoryName][j].Value"></i>
                                                                </span>
                                                            </div>
                                                        }
                                                        else if (setting.Type == FieldType.Date)
                                                        {
                                                            string formattedDateValue = string.Empty;
                                                            if (DateTime.TryParse(setting.Value, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateValue))
                                                            {
                                                                formattedDateValue = dateValue.ToString("yyyy-MM-dd");
                                                            }
                                                            else if (!string.IsNullOrEmpty(setting.Value))
                                                            {
                                                                formattedDateValue = setting.Value;
                                                            }

                                                            <div class="input-group">
                                                                <span class="input-group-text">
                                                                    <i class="ti ti-calendar"></i>
                                                                </span>
                                                                <input type="date" 
                                                                    value="@formattedDateValue" 
                                                                    name="@valueFieldName" 
                                                                    id="@settingId" 
                                                                    class="form-control" />
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            var inputType = setting.Type switch
                                                            {
                                                                FieldType.Email => "email",
                                                                FieldType.Url => "url",
                                                                FieldType.Number => "number",
                                                                FieldType.Phone => "tel",
                                                                _ => "text"
                                                            };
                                                            var step = (setting.Type == FieldType.Number) ? "any" : null;
                                                            var icon = GetInputTypeIcon(setting.Type);

                                                            <div class="input-group">
                                                                <span class="input-group-text">
                                                                    <i class="@icon"></i>
                                                                </span>
                                                                <input type="@inputType" 
                                                                    step="@step" 
                                                                    asp-for="@Model.SettingGroups[categoryName][j].Value" 
                                                                    name="@valueFieldName" 
                                                                    id="@settingId" 
                                                                    class="form-control" />
                                                            </div>
                                                        }

                                                        <input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Id" name="@idFieldName" />
                                                        <input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Key" name="@keyFieldName" />
                                                        <input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Type" name="@typeFieldName" />
                                                        <input type="hidden" asp-for="@Model.SettingGroups[categoryName][j].Description" name="@descFieldName" />

                                                        <span asp-validation-for="@Model.SettingGroups[categoryName][j].Value" class="text-danger"></span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="card-footer bg-transparent d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary">
                            <i class="ti ti-device-floppy me-2"></i> Lưu tất cả thay đổi
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</form>

@section Scripts {
    <script>
        $(document).ready(function() {            
            // Clear search functionality
            $('#clearSearch').on('click', function() {
                $('#SearchTerm').val('');
                $('#settingsForm').attr('action', '@Url.Action("Index")').attr('method', 'get').submit();
            });
            
            // Media selection handling
            function handleMediaSelection(selectedFile, $input) {
                if (selectedFile && selectedFile.path && $input && $input.length) {
                    $input.val(selectedFile.path).trigger('change');
                    $input.closest('.input-group').find('.remove-media-btn').removeClass('d-none');
                    
                    // Update preview if exists
                    const settingId = $input.attr('id');
                    const $previewContainer = $('#preview-' + settingId);
                    
                    if ($previewContainer.length) {
                        $previewContainer.html(`<img src="${selectedFile.path}" class="avatar-img rounded" alt="Preview">`);
                    } else {
                        const $col = $input.closest('.col');
                        $col.after(`
                            <div class="col-auto">
                                <div class="avatar avatar-md" id="preview-${settingId}">
                                    <img src="${selectedFile.path}" class="avatar-img rounded" alt="Preview">
                                </div>
                            </div>
                        `);
                    }
                } else {
                    console.warn('handleMediaSelection received invalid data or input element.');
                }
            }

            $(document).on('click', '.select-media-btn', function() {
                const targetInputSelector = $(this).data('target-input');
                if (!targetInputSelector) {
                    console.error('Select Media button is missing data-target-input attribute.');
                    return;
                }
                const $input = $(targetInputSelector);

                if (!$input.length) {
                    console.error('Target input element not found using selector:', targetInputSelector);
                    return;
                }

                if (typeof window.openMediaSelectionModal === 'function') {
                    const callback = (selectedFile) => {
                        handleMediaSelection(selectedFile, $input);
                    };
                    window.openMediaSelectionModal(callback, 'Image');
                } else {
                    console.error('window.openMediaSelectionModal function is not defined.');
                }
            });

            $(document).on('click', '.remove-media-btn', function() {
                const targetInputSelector = $(this).data('target-input');
                if (!targetInputSelector) {
                    console.error('Remove Media button is missing data-target-input attribute.');
                    return;
                }
                const $input = $(targetInputSelector);

                if ($input.length) {
                    $input.val('').trigger('change');
                    $(this).addClass('d-none');
                    
                    // Remove preview if exists
                    const settingId = $input.attr('id');
                    const $previewContainer = $('#preview-' + settingId).closest('.col-auto');
                    if ($previewContainer.length) {
                        $previewContainer.remove();
                    }
                } else {
                    console.error('Target input element not found for removal using selector:', targetInputSelector);
                }
            });
            
            // Remember active tab
            $('a[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
                localStorage.setItem('activeSettingsTab', $(e.target).attr('href'));
            });
            
            // Restore active tab
            const activeTab = localStorage.getItem('activeSettingsTab');
            if (activeTab) {
                const $tabEl = $(`a[href="${activeTab}"]`);
                if ($tabEl.length) {
                    $tabEl.tab('show');
                }
            }
        });
    </script>
}

@functions {
    public string GetCategoryIcon(string categoryName)
    {
        return categoryName.ToLower() switch
        {
            "general" or "chung" => "<i class=\"ti ti-settings\"></i>",
            "website" or "trang web" => "<i class=\"ti ti-world\"></i>",
            "company" or "công ty" => "<i class=\"ti ti-building\"></i>",
            "contact" or "liên hệ" => "<i class=\"ti ti-address-book\"></i>",
            "social" or "mạng xã hội" => "<i class=\"ti ti-brand-facebook\"></i>",
            "seo" => "<i class=\"ti ti-search\"></i>",
            "email" or "thư điện tử" => "<i class=\"ti ti-mail\"></i>",
            "appearance" or "giao diện" => "<i class=\"ti ti-palette\"></i>",
            "security" or "bảo mật" => "<i class=\"ti ti-shield-lock\"></i>",
            "payment" or "thanh toán" => "<i class=\"ti ti-credit-card\"></i>",
            "shipping" or "vận chuyển" => "<i class=\"ti ti-truck-delivery\"></i>",
            "notification" or "thông báo" => "<i class=\"ti ti-bell\"></i>",
            "analytics" or "phân tích" => "<i class=\"ti ti-chart-bar\"></i>",
            "integration" or "tích hợp" => "<i class=\"ti ti-plug\"></i>",
            _ => "<i class=\"ti ti-adjustments\"></i>"
        };
    }
    
    public string GetSettingIcon(FieldType type)
    {
        return type switch
        {
            FieldType.Text => "<i class=\"ti ti-text-size\"></i>",
            FieldType.TextArea => "<i class=\"ti ti-text-wrap\"></i>",
            FieldType.Html => "<i class=\"ti ti-code\"></i>",
            FieldType.Boolean => "<i class=\"ti ti-toggle-right\"></i>",
            FieldType.Number => "<i class=\"ti ti-123\"></i>",
            FieldType.Date => "<i class=\"ti ti-calendar\"></i>",
            FieldType.Email => "<i class=\"ti ti-mail\"></i>",
            FieldType.Url => "<i class=\"ti ti-link\"></i>",
            FieldType.Phone => "<i class=\"ti ti-phone\"></i>",
            FieldType.Color => "<i class=\"ti ti-palette\"></i>",
            FieldType.Image => "<i class=\"ti ti-photo\"></i>",
            _ => "<i class=\"ti ti-forms\"></i>"
        };
    }
    
    public string GetInputTypeIcon(FieldType type)
    {
        return type switch
        {
            FieldType.Email => "ti ti-mail",
            FieldType.Url => "ti ti-link",
            FieldType.Number => "ti ti-123",
            FieldType.Phone => "ti ti-phone",
            _ => "ti ti-text-size"
        };
    }
}