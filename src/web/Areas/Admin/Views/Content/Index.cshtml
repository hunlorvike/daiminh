@using domain.Entities
@model List<Content>
@{
    const string title = "Quản lý nội dung";
    const string screenCode = "content";
    ViewBag.Title = title;
}

<div class="screen @screenCode">
    <section class="page-header d-print-none">
        <div class="container">
            <div class="row align-items-center">
                <div class="col">
                    <h2 class="page-title">@title</h2>
                </div>
                <div class="col-auto ms-auto">
                    <button class="btn btn-primary command-modal-create" asp-area="Admin" asp-controller="Content"
                            asp-action="Create" data-bs-toggle="modal" data-bs-target="#create-content--modal">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24"
                             stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
                             stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                            <path d="M12 5l0 14" />
                            <path d="M5 12l14 0" />
                        </svg>
                        Thêm nội dung mới
                    </button>
                </div>
            </div>
        </div>
    </section>

    <section class="dm-form form-create-container"></section>
    <section class="dm-form form-details-container"></section>
    <section class="dm-form form-edit-container"></section>
    <section class="dm-form form-delete-container"></section>
    <section class="paged-list">
        <partial name="_List" model="Model" />
    </section>
</div>

@section FootScripts {
    <script>
        $(document).ready(function () {
            $(document).on('shown.bs.modal', '#create-content--modal, #edit-content--modal', function (e) {
                let optionsSummernote = {
                    lang: 'vi-VN',
                    placeholder: 'Nhập nội dung bài viết',
                    tabsize: 2,
                    height: 300,
                    minHeight: 200,
                    maxHeight: 500
                };
                $('#ContentBody').summernote(optionsSummernote);

                new TomSelect('#categoriesSelect', {
                    plugins: ['remove_button'],
                    placeholder: 'Select categories'
                });

                new TomSelect('#tagsSelect', {
                    plugins: ['remove_button'],
                    placeholder: 'Select tags'
                });

                $('#contentTypeSelect').on('change', function () {
                    var contentTypeId = $(this).val();
                    if (!contentTypeId) {
                        $('#dynamicFieldsCard').hide();
                        return;
                    }

                    $.ajax({
                        url: '@Url.Action("GetContentTypeFields", "Content", new { area = "Admin" })',
                        type: 'GET',
                        data: { contentTypeId: contentTypeId },
                        success: function (fields) {
                            if (fields && fields.length > 0) {
                                var fieldsHtml = '';

                                fields.forEach(function (field) {
                                    fieldsHtml += '<div class="mb-3">';
                                    fieldsHtml += '<label class="form-label">' + field.fieldName + (field.isRequired ? ' *' : '') + '</label>';

                                    switch (parseInt(field.fieldType)) {
                                        case @((int)FieldType.Text):
                                            fieldsHtml += '<input type="text" class="form-control" name="FieldValues[' + field.id + ']" ' + (field.isRequired ? 'required' : '') + '>';
                                            break;

                                        case @((int)FieldType.Number):
                                            fieldsHtml += '<input type="number" class="form-control" name="FieldValues[' + field.id + ']" ' + (field.isRequired ? 'required' : '') + '>';
                                            break;

                                        case @((int)FieldType.Date):
                                            fieldsHtml += '<input type="date" class="form-control" name="FieldValues[' + field.id + ']" ' + (field.isRequired ? 'required' : '') + '>';
                                            break;

                                        case @((int)FieldType.Select):
                                            fieldsHtml += '<select class="form-select" name="FieldValues[' + field.id + ']" ' + (field.isRequired ? 'required' : '') + '>';
                                            fieldsHtml += '<option value="">-- Select Option --</option>';

                                            if (field.fieldOptions) {
                                                try {
                                                    var options = JSON.parse(field.fieldOptions);
                                                    options.forEach(function (option) {
                                                        fieldsHtml += '<option value="' + option.value + '">' + option.label + '</option>';
                                                    });
                                                } catch (e) {
                                                    console.error('Error parsing field options:', e);
                                                }
                                            }

                                            fieldsHtml += '</select>';
                                            break;
                                    }
                                    fieldsHtml += '</div>';
                                });

                                $('#dynamicFieldsContainer').html(fieldsHtml);

                                initializeSpecialEditors();

                                $('#dynamicFieldsCard').show();
                            } else {
                                $('#dynamicFieldsCard').hide();
                            }
                        },
                        error: function (error) {
                            console.error('Error loading content type fields:', error);
                            $('#dynamicFieldsCard').hide();
                        }
                    });
                });

                function initializeSpecialEditors() {
                    $('.form-select[multiple]').each(function () {
                        if (!$(this).hasClass('tomselected')) {
                            new TomSelect(this, {
                                plugins: ['remove_button'],
                                placeholder: 'Select options'
                            });
                        }
                    });
                }
            });
        });
    </script>
}
