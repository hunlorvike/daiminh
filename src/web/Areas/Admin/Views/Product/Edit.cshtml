@using web.Areas.Admin.ViewModels.Product
@model ProductViewModel
@{
    ViewData["Title"] = "Chỉnh sửa Sản phẩm - Hệ thống quản trị";
}

@section Styles {
    <style>
        .product-image-item .card-img-top {
            min-height: 150px;
            background-color: #f8f9fa;
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }

        .product-variant-item .form-label {
            font-size: 0.8rem;
            margin-bottom: 0.25rem;
        }

        .ts-control .item[data-value=""] {
            display: none;
        }
    </style>
}

<form asp-action="Edit" asp-route-id="@Model.Id" method="post" id="product-form">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Thông tin Sản phẩm</h3>
        </div>
        <div class="card-body">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />
            <div asp-validation-summary="ModelOnly" class="text-danger alert alert-danger mb-3"></div>
            <partial name="_ProductFormFields" model="Model" />
        </div>
        <div class="card-footer text-end bg-transparent border-top pt-3">
            <a asp-action="Index" class="btn btn-link">Hủy</a>
            <button type="submit" class="btn btn-primary ms-2">
                <i class="ti ti-device-floppy me-2"></i> Cập nhật Sản phẩm
            </button>
        </div>
    </div>
</form>

@section Scripts {
    <script src="~/js/slug.js" asp-append-version="true"></script>

    <script>
        // Duplicating the JS from Create view - consider moving common parts to a separate JS file
        $(document).ready(function () {
             // --- Initialize TomSelect ---
             document.querySelectorAll('.tom-select-single').forEach((el) => { new TomSelect(el, { create: false, placeholder: el.options[0].text || 'Chọn...' }); });
             document.querySelectorAll('.tom-select-multiple').forEach((el) => { new TomSelect(el, { plugins: ['remove_button'], create: false, placeholder: 'Chọn...' }); });

            // --- Initialize Summernote ---
            $('.summernote-editor').summernote({ lang: 'vi-VN', height: 200, toolbar: [ ['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['para', ['ul', 'ol', 'paragraph']], ['insert', ['link', 'picture']], ['view', ['fullscreen', 'codeview', 'help']] ] });
            $('#productDescriptionEditor').summernote('height', 350);

            // --- Slug Generation (Edit) ---
            const nameInput = $('#productName'); const slugInput = $('#productSlug'); const generateBtn = $('#generateSlugButton');
            let userModifiedSlug = (slugInput.val() !== generateVietnameseSlug(nameInput.val())) && (slugInput.val() !== '');
            slugInput.on('input', function() { userModifiedSlug = true; });
            nameInput.on('input', function() { if (!userModifiedSlug) { slugInput.val(generateVietnameseSlug(nameInput.val())); } });
            generateBtn.on('click', function() { userModifiedSlug = false; slugInput.val(generateVietnameseSlug(nameInput.val())); });

            // --- Image Management ---
            const selectImagesBtn = $('#selectProductImagesBtn'); const imageListContainer = $('#product-image-list'); const imageTemplate = $('#product-image-template').html();
            let imageNextIndex = imageListContainer.find('.product-image-item').length;

            function reindexImages() {
                let isAnyMainSet = false;
                imageListContainer.find('.product-image-item').each(function(index) {
                    $(this).attr('data-index', index);
                    $(this).find('input, label, select, textarea').each(function() {
                        const oldName = $(this).attr('name');
                        if (oldName) { $(this).attr('name', oldName.replace(/Images\[\d+\]/, `Images[${index}]`)); }
                        const oldId = $(this).attr('id');
                        if (oldId) {
                            const newId = oldId.replace(/Images___?\d+__?/, `Images_${index}_`);
                             $(this).attr('id', newId);
                            if ($(this).is(':radio') || $(this).is(':checkbox')) {
                                $(this).closest('.form-check').find('label').attr('for', newId);
                            }
                        }
                         if($(this).hasClass('is-main-input')) { $(this).attr('name', `ImagesMainRadio`).val(index); } // Use index as value
                    });
                    if ($(this).find('.is-main-input').is(':checked')) { isAnyMainSet = true; }
                });
                 imageNextIndex = imageListContainer.find('.product-image-item').length;
                updateMainImageHiddenInput(); // Ensure hidden inputs are synced
                 // Auto-select first as main if none selected
                if (!isAnyMainSet && imageListContainer.find('.product-image-item:visible').length > 0) {
                     const firstRadio = imageListContainer.find('.product-image-item:visible:first .is-main-input');
                     firstRadio.prop('checked', true);
                     updateMainImageHiddenInput();
                }
            }
            function updateMainImageHiddenInput() { /* ... (Same as Create view) ... */
                 imageListContainer.find('.product-image-item').each(function(index) { const radio = $(this).find('.is-main-input'); const hidden = $(this).find('.is-main-hidden'); hidden.val(radio.is(':checked') ? 'true' : 'false'); });
            }
            imageListContainer.on('change', '.is-main-input', function() { updateMainImageHiddenInput(); });
            function handleProductImageSelection(selectedFile) { /* ... (Same as Create view) ... */
                 if (!selectedFile || !selectedFile.path) return; const imagePath = selectedFile.path; let existingItem = null;
                imageListContainer.find('.product-image-item').each(function() { if ($(this).data('image-path') === imagePath) { existingItem = $(this); return false; } });
                 if (existingItem && existingItem.length > 0) { if (existingItem.find('.is-deleted-input').val() === 'true') { existingItem.find('.is-deleted-input').val('false'); existingItem.show(); reindexImages(); toastr.info(`Đã thêm lại ảnh '${selectedFile.name}'.`); } else { toastr.warning(`Ảnh '${selectedFile.name}' đã có trong danh sách.`); } return; }
                 const displayUrl = imagePath;
                const newItemHtml = imageTemplate.replace(/__INDEX__/g, imageNextIndex).replace(/__IMAGE_PATH__/g, imagePath).replace(/__THUMB_PATH__/g, imagePath).replace(/__DISPLAY_URL__/g, displayUrl).replace(/__ALT_TEXT__/g, selectedFile.alt || '');
                const newItem = $(newItemHtml); imageListContainer.append(newItem); imageNextIndex++; reindexImages(); toastr.success(`Đã thêm ảnh '${selectedFile.name}'.`);
            }
            selectImagesBtn.on('click', function() { if (typeof window.openMediaSelectionModal === 'function') window.openMediaSelectionModal(handleProductImageSelection, 'Image', true); else { console.error('openMediaSelectionModal is not defined.'); alert('Không thể mở thư viện media.'); } });
            imageListContainer.on('click', '.remove-image-btn', function() { /* ... (Same as Create view) ... */
                 const item = $(this).closest('.product-image-item'); const idInput = item.find('input[name$=".Id"]');
                 if (idInput && parseInt(idInput.val()) > 0) { item.find('.is-deleted-input').val('true'); item.hide(); } else { item.remove(); }
                reindexImages();
            });
            reindexImages(); // Initial index on load

            // --- Variant Management ---
            const variantListContainer = $('#product-variant-list'); const variantTemplate = $('#product-variant-template').html(); let variantNextIndex = $('#product-variant-list .product-variant-item').length;
             function reindexVariants() { /* ... (Same as Create view) ... */
                 variantListContainer.find('.product-variant-item').each(function(index) { $(this).attr('data-index', index); $(this).find('input, label, select, textarea').each(function() { const oldName = $(this).attr('name'); if (oldName) $(this).attr('name', oldName.replace(/Variants\[\d+\]/, `Variants[${index}]`)); const oldId = $(this).attr('id'); if (oldId) { const newId = oldId.replace(/Variants___?\d+__?/, `Variants_${index}_`); $(this).attr('id', newId); if ($(this).is(':checkbox')) $(this).closest('.form-check').find('label').attr('for', newId); } }); }); variantNextIndex = variantListContainer.find('.product-variant-item').length;
             }
             $('#add-variant-btn').on('click', function() { const newItemHtml = variantTemplate.replace(/__INDEX__/g, variantNextIndex); variantListContainer.append(newItemHtml); reindexVariants(); });
             variantListContainer.on('click', '.remove-variant-btn', function() { /* ... (Same as Create view) ... */
                 const item = $(this).closest('.product-variant-item'); const idInput = item.find('input[name$=".Id"]'); if (idInput && parseInt(idInput.val()) > 0) { item.find('.is-deleted-input').val('true'); item.hide(); } else { item.remove(); } reindexVariants();
             });
             reindexVariants(); // Initial index

             // --- OG/Twitter Image Selection ---
             function setupOgImageSelection() { /* ... (Same as Create view) ... */
                  const ogInput = $('#ogImagePathInput'); if(!ogInput.length) return; const selectBtn = $('#selectOgImageBtn'); const removeBtn = $('#removeOgImageBtn'); const preview = $('#ogImagePreview'); const defaultSrc = '/img/placeholder.svg';
                  function handleSelection(selectedFile) { if (selectedFile && selectedFile.url) { preview.attr('src', selectedFile.url).show(); ogInput.val(selectedFile.url).trigger('change'); removeBtn.removeClass('d-none'); } else { preview.attr('src', defaultSrc).hide(); ogInput.val('').trigger('change'); removeBtn.addClass('d-none'); } }
                  selectBtn.on('click', function() { if (typeof window.openMediaSelectionModal === 'function') window.openMediaSelectionModal(handleSelection, 'Image'); }); removeBtn.on('click', function() { preview.attr('src', defaultSrc).hide(); ogInput.val('').trigger('change'); $(this).addClass('d-none'); });
                 if (ogInput.val() === '') preview.hide(); else preview.show();
             }
             setupOgImageSelection();

             $.validator.unobtrusive.parse("#product-form");
        });
    </script>
}