@using web.Areas.Admin.ViewModels.Product
@model ProductViewModel
@{
	ViewData["Title"] = "Chỉnh sửa Sản phẩm - Hệ thống quản trị";
	ViewData["PageTitle"] = $"Chỉnh sửa Sản phẩm: {Model.Name}";
	ViewData["Breadcrumbs"] = new List<(string Text, string Url)> {
			("Sản phẩm", Url.Action(nameof(Index)) ?? "/Admin/Product"),
			($"Chỉnh sửa: {Model.Name}", "")
		};
}
<form asp-action="Edit" method="post">
	@Html.AntiForgeryToken()
	<input type="hidden" asp-for="Id" />
	<div asp-validation-summary="ModelOnly" class="text-danger alert alert-danger mb-3" role="alert"></div>

	<div class="card">
		<div class="card-header">
			<ul class="nav nav-tabs card-header-tabs" data-bs-toggle="tabs">
				<li class="nav-item">
					<a href="#tabs-details" class="nav-link active" data-bs-toggle="tab">
						<i class="ti ti-file-text me-2"></i> Thông tin chi tiết
					</a>
				</li>
				<li class="nav-item">
					<a href="#tabs-variations" class="nav-link" data-bs-toggle="tab">
						<i class="ti ti-apps me-2"></i> Biến thể sản phẩm
					</a>
				</li>
				<li class="nav-item">
					<a href="#tabs-seo" class="nav-link" data-bs-toggle="tab">
						<i class="ti ti-search me-2"></i> Tối ưu SEO
					</a>
				</li>
				<li class="nav-item ms-auto">
					<div class="p-2">
						<a asp-action="Index" class="btn btn-link">Hủy</a>
						<button type="submit" class="btn btn-primary ms-2">
							<i class="ti ti-device-floppy me-2"></i> Cập nhật Sản phẩm
						</button>
					</div>
				</li>
			</ul>
		</div>
		<div class="card-body">
			<div class="tab-content">
				<div class="tab-pane active show" id="tabs-details">
					<partial name="_ProductFormFields" model="Model" />
				</div>

				<div class="tab-pane" id="tabs-variations">
					<h4>Quản lý Biến thể Sản phẩm</h4>
					<p class="text-muted">
						Các biến thể (ví dụ: Màu Đỏ - 5 Lít, Màu Xanh - 1 Lít) cho phép bạn quản lý giá và tồn kho riêng biệt cho từng sự kết hợp thuộc tính.
						Trước tiên, hãy chọn các "Thuộc tính áp dụng" trong tab "Thông tin chi tiết".
					</p>
					@if (Model.SelectedAttributeIds != null && Model.SelectedAttributeIds.Any())
					{
						<div class="alert alert-info">
							Sản phẩm này đang sử dụng thuộc tính:
							<strong>@string.Join(", ", Model.AttributeOptions?.Where(o => Model.SelectedAttributeIds.Contains(int.Parse(o.Value))).Select(o => o.Text) ?? Enumerable.Empty<string>())</strong>.
						</div>

						<a asp-controller="ProductVariation" asp-action="Index" asp-route-productId="@Model.Id" class="btn btn-primary">
							<i class="ti ti-settings me-2"></i> Đi đến Quản lý Biến thể
						</a>
						<small class="d-block mt-2 text-muted">Bạn sẽ được chuyển đến trang riêng để tạo và quản lý các biến thể cho sản phẩm này.</small>
					}
					else
					{
						<div class="alert alert-warning">
							Vui lòng chọn ít nhất một "Thuộc tính áp dụng" trong tab "Thông tin chi tiết" trước khi quản lý biến thể.
						</div>
					}
				</div>

				@* --- Tab 3: SEO --- *@
				<div class="tab-pane" id="tabs-seo">
					<partial name="Components/Crud/_SeoFormFields" model="Model.Seo" />
				</div>
			</div>
		</div>
	</div>
</form>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/handlebars@4.7.7/dist/handlebars.min.js"></script>

	<script src="~/js/slug.js"></script>
	<script>
		$(document).ready(function() {
			const slugManager = SlugManager.init({
				nameInput: '#Name',
				slugInput: '#Slug',
				generateButton: '#generateSlugButton'
			});

			if ($('#Name').val() && !$('#Slug').val()) {
					slugManager.generateSlug();
			}

			// --- Product Image Management JS ---
			const $imageContainer = $('#product-images-container');
			const imageTemplateSource = $('#image-template').html();
			const imageTemplate = Handlebars.compile(imageTemplateSource);
			let imageIndexCounter = parseInt($('#image-index-counter').val());

			// Function to update input names/ids and order indexes
			function updateImageIndices() {
				$imageContainer.find('.product-image-item').each(function(index) {
					const $item = $(this);
					$item.find('input, select, textarea, button, label').each(function() {
						const $el = $(this);
						// Update 'name' attribute (for model binding)
						const oldName = $el.attr('name');
						if (oldName) {
							 // Handle checkbox hidden input specifically
							if ($el.attr('type') === 'checkbox') {
								const hiddenInput = $el.next('input[type="hidden"][name="' + oldName + '"]');
								hiddenInput.attr('name', oldName.replace(/Images\[\d+\]/, `Images[${index}]`));
							}
							 $el.attr('name', oldName.replace(/Images\[\d+\]/, `Images[${index}]`));
						}
						// Update 'id' attribute (for labels, JS targeting)
						const oldId = $el.attr('id');
						 if (oldId) {
							$el.attr('id', oldId.replace(/Images_\d+__/, `Images_${index}__`));
						 }
						// Update 'for' attribute for labels
						const oldFor = $el.attr('for');
						if (oldFor) {
						   $el.attr('for', oldFor.replace(/Images_\d+__/, `Images_${index}__`));
						}
						 // Update data-target-input for media button
						 const oldTarget = $el.attr('data-target-input');
						 if (oldTarget) {
							 $el.attr('data-target-input', oldTarget.replace(/#Images_\d+__/, `#Images_${index}__`));
						 }
					});
					// Update the order index hidden field
					$item.find('.image-order-index').val(index);
				});
			}

			// Add Image Button Handler
			$('#add-image-button').on('click', function() {
				const newItemHtml = imageTemplate({
					id: 0, // New image
					productId: @Model.Id, // Link to current product ID if editing
					imageUrl: '',
					thumbnailUrl: '',
					altText: '',
					title: '',
					orderIndex: imageIndexCounter,
					isMain: false,
					isDeleted: false,
					index: imageIndexCounter // Use counter for initial index
				});
				$imageContainer.append(newItemHtml);
				updateImageIndices(); // Update indices after adding
				imageIndexCounter++; // Increment for the next new image
				 // Initialize new elements if needed (e.g., media picker buttons)
				 initMediaPickerButtons();
				 initImageInputWatchers(); // Re-attach preview watchers
			});

			// Remove Image Button Handler (uses event delegation)
			$imageContainer.on('click', '.remove-image-button', function() {
				const $item = $(this).closest('.product-image-item');
				const imageId = $item.data('id'); // Get the ID from data attribute

				if (imageId > 0) {
					// Existing image: Mark as deleted visually and in hidden field
					 $item.hide(); // Or add a class for visual "deleted" state
					$item.find('.image-is-deleted').val('true');
					 // Keep the item in the DOM so its hidden fields are submitted
					 // and the controller knows which existing image to delete.
				} else {
					// New image: Remove completely from DOM
					$item.remove();
				}
				updateImageIndices(); // Update indices after removing/hiding
			});

			// Make images sortable
			const sortable = new Sortable($imageContainer[0], {
				animation: 150,
				handle: '.handle', // Handle to drag
				onEnd: function (evt) {
					updateImageIndices(); // Update indices after sorting
				}
			});

			// Media Picker Button Handler (uses event delegation)
			function initMediaPickerButtons() {
				 $imageContainer.find('.select-media-button').off('click').on('click', function() {
					const $button = $(this);
					// Get target input using data attribute
					const targetInputSelector = $button.data('target-input');
					const $targetInput = $(targetInputSelector);
					if (!$targetInput.length) {
						console.error("Media button target input not found:", targetInputSelector);
						return; // Exit if target not found
					}

					const $preview = $targetInput.closest('.form-group').find('.media-preview-area');

					// Callback function to handle selected file from modal
					const callback = function(selectedFile) {
						$targetInput.val(selectedFile.url).trigger('change'); // Set value and trigger change
						 // Update preview area for this specific input
						 $preview.html(`<img src="${selectedFile.url}" style="max-width: 100px; height: auto;" class="img-thumbnail" />`);

						 // If this is the main image input (Images[...].ImageUrl), maybe update thumbnail automatically?
						 // This is an optional enhancement. For now, just set the main URL.
					};

					// Assumes openMediaModal is a global function defined elsewhere
					// Pass the button itself or target input to the modal if it needs context
					if (typeof openMediaModal === 'function') {
						openMediaModal($targetInput, callback);
					} else {
						console.error("openMediaModal function is not defined.");
						alert("Media modal functionality is not available.");
					}
				});
			}

			 // Watch Image URL inputs to update previews
			function initImageInputWatchers() {
				$imageContainer.find('.media-url-input').off('input change').on('input change', function() {
					const $input = $(this);
					const $preview = $input.closest('.form-group').find('.media-preview-area');
					if ($input.val() === '') {
						$preview.empty();
					} else {
						 // Simple image preview update
						 // Check if it's a valid image URL? For now, just trust the user/media picker.
						$preview.html(`<img src="${$input.val()}" style="max-width: 100px; height: auto;" class="img-thumbnail" />`);
					}
				});
			}

			// Watch IsMain checkboxes
			$imageContainer.on('change', '.image-is-main', function() {
				 const $changedCheckbox = $(this);
				 // If this checkbox was just checked
				 if ($changedCheckbox.is(':checked')) {
					 // Uncheck all other 'IsMain' checkboxes within this container
					 $imageContainer.find('.image-is-main').not($changedCheckbox).prop('checked', false);
					  // Ensure the hidden input for the unchecked ones is correctly set to false
					  $imageContainer.find('.image-is-main').not($changedCheckbox).each(function() {
						 $(this).next('input[type="hidden"]').val('false');
					  });
				 }
				 // Ensure the hidden input for the changed one is correct
				  $changedCheckbox.next('input[type="hidden"]').val($changedCheckbox.is(':checked').toString().toLowerCase());
			});


			 // Initial setup:
			 initMediaPickerButtons(); // Attach handlers to existing buttons
			 initImageInputWatchers(); // Attach watchers to existing inputs
			 updateImageIndices(); // Ensure initial indices are correct
		});
	</script>
}