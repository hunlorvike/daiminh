@using web.Areas.Admin.ViewModels.Product
@model ProductViewModel
@{
	ViewData["Title"] = "Chỉnh sửa Sản phẩm";
	// Breadcrumbs set in Controller
}

@section Styles {
	<link rel="stylesheet" href="~/css/summernote.css" />

	<style>
		.product-image-item .card-img-top {
			min-height: 150px;
			background-color: #f8f9fa;
			background-size: contain;
			background-repeat: no-repeat;
			background-position: center;
		}

		.product-variant-item .form-label {
			font-size: 0.8rem;
			margin-bottom: 0.25rem;
		}
	</style>
}

<form asp-action="Edit" method="post" id="product-form">
	@Html.AntiForgeryToken()
	<input type="hidden" asp-for="Id" />

	<div class="card">
		<div class="card-header">
			<h3 class="card-title">Thông tin Sản phẩm</h3>
		</div>
		<div class="card-body">
			<div asp-validation-summary="ModelOnly" class="text-danger alert alert-danger"></div>
			<partial name="_ProductFormFields" model="Model" />
		</div>
		<div class="card-footer text-end">
			<a asp-action="Index" class="btn btn-link">Hủy</a>
			<button type="submit" class="btn btn-primary">
				<i class="ti ti-device-floppy me-2"></i> Cập nhật Sản phẩm
			</button>
		</div>
	</div>
</form>


@section Scripts {
	<script src="~/js/slug.js"></script>
	<script src="~/js/summernote.js"></script>

	<script>
		$(document).ready(function () {
			const tomSelectCategories = new TomSelect('#SelectedCategoryIds', { plugins: ['remove_button'], create: false, placeholder: 'Chọn danh mục...' });
			const tomSelectTags = new TomSelect('#SelectedTagIds', { plugins: ['remove_button'], create: true, placeholder: 'Chọn hoặc nhập thẻ mới...' });

			// --- Slug Generation (Edit Version) ---
			const nameInput = $('#productName');
			const slugInput = $('#productSlug');
			const generateBtn = $('#generateSlugButton');
			let userModifiedSlug = (slugInput.val() !== generateVietnameseSlug(nameInput.val())) && (slugInput.val() !== ''); // Check initial state

			slugInput.on('input', function() { userModifiedSlug = true; });
			nameInput.on('input', function() {
				if (!userModifiedSlug) { slugInput.val(generateVietnameseSlug(nameInput.val())); }
			});
			generateBtn.on('click', function() {
				userModifiedSlug = false; // Allow auto again
				slugInput.val(generateVietnameseSlug(nameInput.val()));
			});

			// --- Image Management ---
			const imageUploadInput = $('#productImageUpload');
			const imageListContainer = $('#product-image-list');
			const imageTemplate = $('#product-image-template').html();
			let imageNextIndex = $('#product-image-list .product-image-item').length; // Start index based on existing items (0 for Create)

			 // Function to re-index image inputs after add/remove/sort
			 function reindexImages() {
				imageListContainer.find('.product-image-item').each(function(index) {
					$(this).attr('data-index', index);
					$(this).find('input, label, select, textarea').each(function() {
						const oldName = $(this).attr('name');
						if (oldName) {
							const newName = oldName.replace(/Images\[\d+\]/, `Images[${index}]`);
							$(this).attr('name', newName);
						}
						 const oldId = $(this).attr('id');
						 if (oldId) {
							const newId = oldId.replace(/isMain_\d+/, `isMain_${index}`); // Adjust for radio ID
							$(this).attr('id', newId);
							// Update label 'for' attribute
							 $(this).closest('.form-check').find('label').attr('for', newId);
						 }
						  // Ensure unique name for radio group per item
						  if($(this).hasClass('is-main-input')) {
							   $(this).attr('name', `Images[${index}].IsMainRadio`);
						  }
					});
				});
				imageNextIndex = imageListContainer.find('.product-image-item').length;
				 // Update the hidden input value when radio changes
				 updateMainImageHiddenInput();
			 }

			 // Update hidden input based on radio state
			 function updateMainImageHiddenInput() {
				 imageListContainer.find('.product-image-item').each(function() {
					 const radio = $(this).find('.is-main-input');
					 const hidden = $(this).find('.is-main-hidden');
					 hidden.val(radio.is(':checked') ? 'true' : 'false');
				 });
			 }
			 // Initial update on load (for Edit)
			 updateMainImageHiddenInput();

			  // Handle radio change to update hidden and ensure only one main
			 imageListContainer.on('change', '.is-main-input', function() {
				if ($(this).is(':checked')) {
					 // Uncheck all other radios
					 imageListContainer.find('.is-main-input').not(this).prop('checked', false);
					 // Update all hidden fields
					 updateMainImageHiddenInput();
				}
			 });


			imageUploadInput.on('change', function (e) {
				const files = e.target.files;
				if (!files || files.length === 0) return;

				for (let i = 0; i < files.length; i++) {
					uploadProductImageFile(files[i], imageNextIndex);
					imageNextIndex++; // Increment index for the next potential upload
				}
				$(this).val(''); // Reset file input
			});

			function uploadProductImageFile(file, index) {
				// Use the template
				const newItemHtml = imageTemplate.replace(/__INDEX__/g, index);
				const newItem = $(newItemHtml);
				imageListContainer.append(newItem);
				 reindexImages(); // Re-index *after* appending

				const progressBar = newItem.find('.progress-bar');
				const imagePreview = newItem.find('.image-preview');
				 const progressContainer = newItem.find('.progress');

				const formData = new FormData();
				formData.append('file', file);

				$.ajax({
					url: '/api/admin/products/upload-image', // Your API endpoint
					type: 'POST',
					data: formData,
					processData: false,
					contentType: false,
					xhr: function () {
						const xhr = new window.XMLHttpRequest();
						xhr.upload.addEventListener('progress', function (evt) {
							if (evt.lengthComputable) {
								const percentComplete = Math.round((evt.loaded / evt.total) * 100);
								progressBar.css('width', percentComplete + '%').attr('aria-valuenow', percentComplete).text(percentComplete + '%');
							}
						}, false);
						return xhr;
					},
					success: function (result) {
						if (result && result.imageUrl) {
							 newItem.find('.image-url-input').val(result.imageUrl);
							 newItem.find('.thumb-url-input').val(result.thumbnailUrl || result.imageUrl); // Use thumb if available
							 newItem.find('input[name$=".AltText"]').val(result.altText || ''); // Set default Alt text
							 imagePreview.attr('src', MediaUrlHelper.GetMinioUrl(result.thumbnailUrl || result.imageUrl)).show(); // Use helper
							 progressContainer.hide();
						} else {
							 // Handle upload success but invalid response
							 progressBar.addClass('bg-danger').text('Lỗi xử lý');
							 console.error("Invalid response from image upload API:", result);
						}
					},
					error: function (xhr, status, error) {
						console.error("Image Upload error:", status, error, xhr.responseText);
						 progressBar.addClass('bg-danger').text('Upload Lỗi');
						 // Consider adding a way for the user to retry or remove this failed item
					}
				});
			}

			 // Remove Image Button
			 imageListContainer.on('click', '.remove-image-btn', function() {
				const item = $(this).closest('.product-image-item');
				 // If item has Id > 0 (existing image), mark for deletion
				 const idInput = item.find('input[name$=".Id"]');
				 if (idInput && parseInt(idInput.val()) > 0) {
					 item.find('.is-deleted-input').val('true');
					 item.hide(); // Hide it visually
				 } else {
					 // If it's a newly added image (Id=0), just remove from DOM
					 item.remove();
				 }
				 reindexImages(); // Re-index after removing/hiding
			 });

			  // Optional: Initialize SortableJS for image reordering
			 // if (typeof Sortable !== 'undefined') {
			 //     new Sortable(imageListContainer[0], {
			 //         animation: 150,
			 //         handle: '.card', // Allow dragging the whole card
			 //         onEnd: function (evt) {
			 //             // Update order index inputs based on new order
			 //             imageListContainer.find('.product-image-item').each(function(index) {
			 //                 $(this).find('.order-index-input').val(index);
			 //             });
			 //             reindexImages(); // Re-index names/ids after sorting
			 //         }
			 //     });
			 // }


			// --- Variant Management ---
			const variantListContainer = $('#product-variant-list');
			const variantTemplate = $('#product-variant-template').html();
			let variantNextIndex = $('#product-variant-list .product-variant-item').length;

			 // Function to re-index variant inputs
			 function reindexVariants() {
				variantListContainer.find('.product-variant-item').each(function(index) {
					$(this).attr('data-index', index);
					$(this).find('input, label, select, textarea').each(function() {
						 const oldName = $(this).attr('name');
						if (oldName) {
							const newName = oldName.replace(/Variants\[\d+\]/, `Variants[${index}]`);
							$(this).attr('name', newName);
						}
						 const oldId = $(this).attr('id');
						 if (oldId) {
							const newId = oldId.replace(/variantActive_\d+/, `variantActive_${index}`); // Adjust for switch ID
							 const label = $(this).closest('.form-check').find('label');
							$(this).attr('id', newId);
							  if(label.length) label.attr('for', newId);
						 }
					});
				});
				 variantNextIndex = variantListContainer.find('.product-variant-item').length;
			}

			 // Add Variant Button
			 $('#add-variant-btn').on('click', function() {
				 const newItemHtml = variantTemplate.replace(/__INDEX__/g, variantNextIndex);
				 variantListContainer.append(newItemHtml);
				 reindexVariants(); // Re-index after adding
			 });

			 // Remove Variant Button
			 variantListContainer.on('click', '.remove-variant-btn', function() {
				 const item = $(this).closest('.product-variant-item');
				 const idInput = item.find('input[name$=".Id"]');
				  if (idInput && parseInt(idInput.val()) > 0) {
					 item.find('.is-deleted-input').val('true');
					 item.hide();
				 } else {
					 item.remove();
				 }
				 reindexVariants(); // Re-index after removing/hiding
			 });

			 // Handle checkbox submitting correct boolean value
			 variantListContainer.on('change', 'input[type="checkbox"][name$=".IsActive"]', function() {
				// The hidden input with value="false" should handle the unchecked case automatically
				// This ensures value="true" is sent when checked.
			 });


			// --- OG/Twitter Image Selection ---
			const selectOgImageBtn = $('#selectOgImageBtn');
			const removeOgImageBtn = $('#removeOgImageBtn');
			const ogImagePreview = $('#ogImagePreview');
			const ogImagePathInput = $('#ogImagePathInput'); // Stores URL
			const defaultOgImage = '/img/placeholder.svg';

			function handleOgImageSelection(selectedFile) {
				if (selectedFile && selectedFile.url) {
					ogImagePreview.attr('src', selectedFile.url).show();
					ogImagePathInput.val(selectedFile.url).trigger('change'); // Store URL
					removeOgImageBtn.removeClass('d-none');
				}
			}
			selectOgImageBtn.on('click', function() {
				if (typeof window.openMediaSelectionModal === 'function') {
					window.openMediaSelectionModal(handleOgImageSelection, 'Image');
				} else { console.error('openMediaSelectionModal is not defined.'); }
			});
			removeOgImageBtn.on('click', function() {
				ogImagePreview.attr('src', defaultOgImage).hide();
				ogImagePathInput.val('').trigger('change');
				$(this).addClass('d-none');
			});

			 $.validator.unobtrusive.parse("#product-form");
		});
	</script>
}