@using shared.Helpers
@using web.Areas.Admin.ViewModels.Product
@model ProductViewModel
@{
	ViewData["Title"] = "Thêm Sản phẩm mới";
}

@section Styles {
	<link rel="stylesheet" href="~/css/summernote.css" />
	<style>
		/* Custom styles for image/variant items if needed */
		.product-image-item .card-img-top {
			min-height: 150px;
			background-color: #f8f9fa;
			background-size: contain;
			background-repeat: no-repeat;
			background-position: center;
		}

		.product-variant-item .form-label {
			font-size: 0.8rem;
			margin-bottom: 0.25rem;
		}
	</style>
}

<form asp-action="Create" method="post" id="product-form">
	@Html.AntiForgeryToken()

	<div class="card">
		<div class="card-header">
			<h3 class="card-title">Thông tin Sản phẩm</h3>
		</div>
		<div class="card-body">
			<div asp-validation-summary="ModelOnly" class="text-danger alert alert-danger"></div>
			<partial name="_ProductFormFields" model="Model" />
		</div>
		<div class="card-footer text-end">
			<a asp-action="Index" class="btn btn-link">Hủy</a>
			<button type="submit" class="btn btn-primary">
				<i class="ti ti-device-floppy me-2"></i> Lưu Sản phẩm
			</button>
		</div>
	</div>
</form>


@section Scripts {
	<script src="~/js/slug.js"></script>
	<script src="~/js/summernote.js"></script>

	<script>
		$(document).ready(function () {
			const tomSelectCategories = new TomSelect('#SelectedCategoryIds', {
				plugins: ['remove_button'],
				create: false,
				placeholder: 'Chọn danh mục...'
			});
			const tomSelectTags = new TomSelect('#SelectedTagIds', {
				plugins: ['remove_button'],
				create: false,
				placeholder: 'Chọn hoặc nhập thẻ mới...'
			});

			 // --- Slug Generation ---
			 const nameInput = $('#productName');
			 const slugInput = $('#productSlug');
			 const generateBtn = $('#generateSlugButton');
			 nameInput.on('input', function() {
				if (slugInput.val() === '') { slugInput.val(generateVietnameseSlug(nameInput.val())); }
			 });
			 generateBtn.on('click', function() { slugInput.val(generateVietnameseSlug(nameInput.val())); });


				// --- Image Management (Using Media Selection Modal) ---
		const selectImagesBtn = $('#selectProductImagesBtn');
		const imageListContainer = $('#product-image-list');
		const imageTemplate = $('#product-image-template').html();
		let imageNextIndex = $('#product-image-list .product-image-item').length;

		// Function to re-index image inputs after add/remove/sort
		function reindexImages() {
			let maxOrder = -1;
			imageListContainer.find('.product-image-item:visible').each(function(index) { // Only re-index visible items for order
				$(this).attr('data-index', index); // Update visual index if needed

				const orderInput = $(this).find('.order-index-input');
				orderInput.val(index); // Set order index based on visual order
				maxOrder = index;

				// Re-index names and IDs for proper model binding
				$(this).find('input, label, select, textarea').each(function() {
					const oldName = $(this).attr('name');
					if (oldName) {
						const newName = oldName.replace(/Images\[\d+\]/, `Images[${index}]`);
						$(this).attr('name', newName);
					}
					const oldId = $(this).attr('id');
					if (oldId) {
						const newId = oldId.replace(/isMain_\d+/, `isMain_${index}`);
						$(this).attr('id', newId);
						$(this).closest('.form-check').find('label').attr('for', newId);
					}
					if($(this).hasClass('is-main-input')) {
						 $(this).attr('name', `Images[${index}].IsMainRadio`);
					}
				});
			});
			imageNextIndex = imageListContainer.find('.product-image-item').length; // Keep track of total items added
			updateMainImageHiddenInput(); // Update hidden inputs after re-indexing
		}


		// Update hidden input based on radio state
		function updateMainImageHiddenInput() {
			let mainImageFound = false;
			imageListContainer.find('.product-image-item:visible').each(function() {
				const radio = $(this).find('.is-main-input');
				const hidden = $(this).find('.is-main-hidden');
				if(radio.is(':checked')) {
					hidden.val('true');
					mainImageFound = true;
				} else {
					hidden.val('false');
				}
			});
			 // Ensure at least one image is main if there are visible images
			 // if (!mainImageFound && imageListContainer.find('.product-image-item:visible').length > 0) {
			 //     const firstVisibleRadio = imageListContainer.find('.product-image-item:visible:first .is-main-input');
			 //     if(firstVisibleRadio.length) {
			 //         firstVisibleRadio.prop('checked', true);
			 //          firstVisibleRadio.closest('.product-image-item').find('.is-main-hidden').val('true');
			 //     }
			 // }
		}
		// Initial update on load (for Edit)
		updateMainImageHiddenInput();

		// Handle radio change to update hidden and ensure only one main
		imageListContainer.on('change', '.is-main-input', function() {
			if ($(this).is(':checked')) {
				// Uncheck all other radios (only visible ones)
				imageListContainer.find('.is-main-input').not(this).prop('checked', false);
				// Update all hidden fields for visible items
				updateMainImageHiddenInput();
			}
		});


		// Callback function when image is selected from modal
		function handleProductImageSelection(selectedFile) {
			if (!selectedFile || !selectedFile.path) {
				console.warn("Selection callback received invalid data:", selectedFile);
				return;
			}

			const imagePath = selectedFile.path;

			// Check if image path already exists (visible or hidden)
			let existingItem = null;
			imageListContainer.find('.product-image-item').each(function() {
				if ($(this).data('image-path') === imagePath) {
					existingItem = $(this);
					return false; // exit loop
				}
			});

			if (existingItem && existingItem.length > 0) {
				// If it exists but was marked as deleted, un-delete it and make visible
				if (existingItem.find('.is-deleted-input').val() === 'true') {
					existingItem.find('.is-deleted-input').val('false');
					existingItem.show();
					reindexImages(); // Re-index after showing
					toastr.info(`Đã thêm lại ảnh '${selectedFile.name}'.`);
				} else {
					// Already exists and is visible
					toastr.warning(`Ảnh '${selectedFile.name}' đã có trong danh sách.`);
				}
				return; // Don't add duplicate
			}

			// --- Add New Image Item ---
			const displayUrl = '@(MediaUrlHelper.GetMinioUrl("__IMAGE_PATH__", "/img/placeholder.svg"))'.replace('__IMAGE_PATH__', imagePath);
			const newItemHtml = imageTemplate
								.replace(/__INDEX__/g, imageNextIndex)
								.replace(/__IMAGE_PATH__/g, imagePath);
			const newItem = $(newItemHtml);

			// Populate data
			newItem.find('.image-url-input').val(imagePath);
			newItem.find('.thumb-url-input').val(imagePath); // Assuming thumb path is same for now
			newItem.find('.image-preview').css('background-image', `url(${displayUrl})`);
			newItem.find('input[name$=".AltText"]').val(selectedFile.alt || ''); // Use AltText from media library if available

			// Assign initial order index (append to end)
			newItem.find('.order-index-input').val(imageListContainer.find('.product-image-item:visible').length);

			imageListContainer.append(newItem);
			imageNextIndex++; // Increment the absolute index
			reindexImages(); // Re-index everything after adding
			toastr.success(`Đã thêm ảnh '${selectedFile.name}'.`);
		}

		// Attach click handler to the "Select Images" button
		selectImagesBtn.on('click', function() {
			if (typeof window.openMediaSelectionModal === 'function') {
				// Filter for images only
				window.openMediaSelectionModal(handleProductImageSelection, 'Image');
			} else {
				console.error('Function openMediaSelectionModal is not defined.');
				alert('Không thể mở thư viện media.');
			}
		});


		// Remove Image Button (logic remains the same: hide and mark deleted)
		imageListContainer.on('click', '.remove-image-btn', function() {
			const item = $(this).closest('.product-image-item');
			const idInput = item.find('input[name$=".Id"]');

			// Always hide first
			item.hide();
			item.find('.is-deleted-input').val('true');

			// If it was the main image, clear its radio button state visually
			const radio = item.find('.is-main-input');
			if(radio.is(':checked')) {
				radio.prop('checked', false);
			}

			reindexImages(); // Re-index after hiding

			 // Optional: Suggest setting a new main image if the deleted one was main
			 if (radio.is(':checked') && imageListContainer.find('.product-image-item:visible').length > 0) {
				toastr.warning('Ảnh đại diện đã bị xóa. Vui lòng chọn ảnh đại diện khác.');
			 }
		});

			// --- Variant Management ---
			const variantListContainer = $('#product-variant-list');
			const variantTemplate = $('#product-variant-template').html();
			let variantNextIndex = $('#product-variant-list .product-variant-item').length;

			 // Function to re-index variant inputs
			 function reindexVariants() {
				variantListContainer.find('.product-variant-item').each(function(index) {
					$(this).attr('data-index', index);
					$(this).find('input, label, select, textarea').each(function() {
						 const oldName = $(this).attr('name');
						if (oldName) {
							const newName = oldName.replace(/Variants\[\d+\]/, `Variants[${index}]`);
							$(this).attr('name', newName);
						}
						 const oldId = $(this).attr('id');
						 if (oldId) {
							const newId = oldId.replace(/variantActive_\d+/, `variantActive_${index}`); // Adjust for switch ID
							 const label = $(this).closest('.form-check').find('label');
							$(this).attr('id', newId);
							  if(label.length) label.attr('for', newId);
						 }
					});
				});
				 variantNextIndex = variantListContainer.find('.product-variant-item').length;
			}

			 // Add Variant Button
			 $('#add-variant-btn').on('click', function() {
				 const newItemHtml = variantTemplate.replace(/__INDEX__/g, variantNextIndex);
				 variantListContainer.append(newItemHtml);
				 reindexVariants(); // Re-index after adding
			 });

			 // Remove Variant Button
			 variantListContainer.on('click', '.remove-variant-btn', function() {
				 const item = $(this).closest('.product-variant-item');
				 const idInput = item.find('input[name$=".Id"]');
				  if (idInput && parseInt(idInput.val()) > 0) {
					 item.find('.is-deleted-input').val('true');
					 item.hide();
				 } else {
					 item.remove();
				 }
				 reindexVariants(); // Re-index after removing/hiding
			 });

			 // Handle checkbox submitting correct boolean value
			 variantListContainer.on('change', 'input[type="checkbox"][name$=".IsActive"]', function() {
				// The hidden input with value="false" should handle the unchecked case automatically
				// This ensures value="true" is sent when checked.
			 });


			// --- OG/Twitter Image Selection ---
			const selectOgImageBtn = $('#selectOgImageBtn');
			const removeOgImageBtn = $('#removeOgImageBtn');
			const ogImagePreview = $('#ogImagePreview');
			const ogImagePathInput = $('#ogImagePathInput'); // Stores URL
			const defaultOgImage = '/img/placeholder.svg';

			function handleOgImageSelection(selectedFile) {
				if (selectedFile && selectedFile.url) {
					ogImagePreview.attr('src', selectedFile.url).show();
					ogImagePathInput.val(selectedFile.url).trigger('change'); // Store URL
					removeOgImageBtn.removeClass('d-none');
				}
			}
			selectOgImageBtn.on('click', function() {
				if (typeof window.openMediaSelectionModal === 'function') {
					window.openMediaSelectionModal(handleOgImageSelection, 'Image');
				} else { console.error('openMediaSelectionModal is not defined.'); }
			});
			removeOgImageBtn.on('click', function() {
				ogImagePreview.attr('src', defaultOgImage).hide();
				ogImagePathInput.val('').trigger('change');
				$(this).addClass('d-none');
			});


			 // Re-apply jQuery validation to dynamically added variant fields
			 // This might be needed depending on how you handle validation
			 $.validator.unobtrusive.parse("#product-form"); // Call after adding variants if using unobtrusive
		});
	</script>
}

