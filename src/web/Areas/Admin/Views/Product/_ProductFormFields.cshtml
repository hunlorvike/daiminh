@using web.Areas.Admin.ViewModels.Product
@model ProductViewModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions {
	public string GetAntiXsrfRequestToken()
	{
		return Xsrf.GetAndStoreTokens(Context).RequestToken!;
	}
}

<div class="card">
	<div class="card-header">
		<h3 class="card-title">Thông tin Sản phẩm</h3>
	</div>
	<div class="card-body">
		<div class="row g-3 mb-4">
			<div class="col-md-8">
				<div class="form-group mb-3">
					<label asp-for="Name" class="form-label required"></label>
					<input asp-for="Name" class="form-control" />
					<span asp-validation-for="Name" class="text-danger"></span>
				</div>

				<div class="form-group mb-3">
					<label asp-for="Slug" class="form-label required"></label>
					<div class="input-group">
						<input asp-for="Slug" class="form-control" />
						<button class="btn btn-outline-secondary" type="button" id="generateSlugButton" title="Tạo slug tự động">
							<i class="ti ti-refresh"></i>
						</button>
					</div>
					<span asp-validation-for="Slug" class="text-danger"></span>
					<small class="form-hint">Dùng cho URL (chỉ chứa chữ cái thường, số và dấu gạch ngang). Phải là duy nhất.</small>
				</div>

				<div class="form-group mb-3">
					<label asp-for="Description" class="form-label required"></label>
					<textarea asp-for="Description" class="form-control wysiwyg" rows="10"></textarea>
					<span asp-validation-for="Description" class="text-danger"></span>
				</div>

				<div class="form-group mb-3">
					<label asp-for="ShortDescription" class="form-label"></label>
					<textarea asp-for="ShortDescription" class="form-control" rows="3"></textarea>
					<span asp-validation-for="ShortDescription" class="text-danger"></span>
				</div>

				<div class="row g-3 mb-3">
					<div class="col-md-6">
						<div class="form-group">
							<label asp-for="Manufacturer" class="form-label"></label>
							<input asp-for="Manufacturer" class="form-control" />
							<span asp-validation-for="Manufacturer" class="text-danger"></span>
						</div>
					</div>
					<div class="col-md-6">
						<div class="form-group">
							<label asp-for="Origin" class="form-label"></label>
							<input asp-for="Origin" class="form-control" />
							<span asp-validation-for="Origin" class="text-danger"></span>
						</div>
					</div>
				</div>

				<div class="form-group mb-3">
					<label asp-for="Specifications" class="form-label"></label>
					<textarea asp-for="Specifications" class="form-control wysiwyg" rows="5"></textarea>
					<span asp-validation-for="Specifications" class="text-danger"></span>
				</div>

				<div class="form-group mb-3">
					<label asp-for="Usage" class="form-label"></label>
					<textarea asp-for="Usage" class="form-control wysiwyg" rows="5"></textarea>
					<span asp-validation-for="Usage" class="text-danger"></span>
				</div>

                 <div class="form-group mb-3">
					<label asp-for="SelectedAttributeIds" class="form-label"></label>
					<select asp-for="SelectedAttributeIds" asp-items="@Model.AttributeOptions" class="form-select tom-selected" multiple></select>
					<span asp-validation-for="SelectedAttributeIds" class="text-danger"></span>
                     <small class="form-hint">Chọn các thuộc tính áp dụng cho loại sản phẩm này (vd: Màu sắc, Dung tích).</small>
				</div>

				<div class="form-group mb-3">
					<label asp-for="SelectedTagIds" class="form-label"></label>
					<select asp-for="SelectedTagIds" asp-items="@Model.TagOptions" class="form-select tom-selected" multiple></select>
					<span asp-validation-for="SelectedTagIds" class="text-danger"></span>
				</div>

                <div class="form-group mb-3">
					<label asp-for="SelectedArticleIds" class="form-label"></label>
					<select asp-for="SelectedArticleIds" asp-items="@Model.ArticleOptions" class="form-select tom-selected" multiple></select>
					<span asp-validation-for="SelectedArticleIds" class="text-danger"></span>
                     <small class="form-hint">Chọn các bài viết liên quan đến sản phẩm này.</small>
				</div>

                @* --- Product Image Management --- *@
                <div class="card mt-4">
                    <div class="card-header">
                        <h4 class="card-title mb-0">Hình ảnh sản phẩm</h4>
                    </div>
                    <div class="card-body" id="product-images-container">
                        @if (Model.Images != null && Model.Images.Any())
                        {
                            for (int i = 0; i < Model.Images.Count; i++)
                            {
                                <partial name="_ProductImageFields" model="Model.Images[i]" view-data='new ViewDataDictionary(ViewData) { { "Index", i } }' />
                            }
                        }
                        else
                        {
                             <partial name="_ProductImageFields" model="new ProductImageViewModel()" view-data='new ViewDataDictionary(ViewData) { { "Index", 0 } }' />
                        }
                         <input type="hidden" id="image-index-counter" value="@(Model.Images != null ? Model.Images.Count : 1)" />
                    </div>
                     <div class="card-footer bg-transparent border-top pt-3">
                         <button type="button" class="btn btn-secondary" id="add-image-button">
                             <i class="ti ti-photo-plus me-2"></i> Thêm ảnh
                         </button>
                         <small class="form-hint ms-2">Kéo thả các khối ảnh để thay đổi thứ tự.</small>
                     </div>
                </div>

                @* --- Product Variation Management (Placeholder) --- *@
                @* Variations management is complex and often requires a separate UI/modal/page.
                   Leaving this as a placeholder for now, focusing on the Article pattern.
                   The ProductVariation entity/config exists but is not managed directly on this form.*@
                 @* <div class="card mt-4">
                     <div class="card-header">
                         <h4 class="card-title mb-0">Biến thể sản phẩm</h4>
                     </div>
                      <div class="card-body">
                          <p class="text-muted">Quản lý biến thể (giá, tồn kho, thuộc tính) sẽ được xây dựng riêng hoặc trong một giao diện phức tạp hơn.</p>
                          // Link to a Variations management page/modal if implemented
                           @if(Model.Id > 0) {
                               // <a href="@Url.Action("Variations", "Product", new { productId = Model.Id })" class="btn btn-outline-primary">Quản lý Biến thể</a>
                           }
                      </div>
                 </div> *@


			</div>

			<div class="col-md-4">
				<div class="form-group mb-3">
					<label asp-for="CategoryId" class="form-label required"></label>
					<select asp-for="CategoryId" asp-items="@Model.CategoryOptions" class="form-select tom-selected"></select>
					<span asp-validation-for="CategoryId" class="text-danger"></span>
				</div>

                <div class="form-group mb-3">
					<label asp-for="BrandId" class="form-label"></label>
					<select asp-for="BrandId" asp-items="@Model.BrandOptions" class="form-select tom-selected"></select>
					<span asp-validation-for="BrandId" class="text-danger"></span>
				</div>

				<div class="form-group mb-3">
					<label asp-for="Status" class="form-label required"></label>
					<select asp-for="Status" asp-items="@Model.StatusOptions" class="form-select"></select>
					<span asp-validation-for="Status" class="text-danger"></span>
				</div>

                <div class="form-check form-switch mb-0 mt-3">
					<input class="form-check-input" type="checkbox" asp-for="IsActive" role="switch">
					<label class="form-check-label" asp-for="IsActive"></label>
					<span asp-validation-for="IsActive" class="text-danger"></span>
				</div>

				<div class="form-check form-switch mb-0 mt-3">
					<input class="form-check-input" type="checkbox" asp-for="IsFeatured" role="switch">
					<label class="form-check-label" asp-for="IsFeatured"></label>
					<span asp-validation-for="IsFeatured" class="text-danger"></span>
				</div>
			</div>
		</div>
	</div>
</div>

@* --- Product Image Partial View Template --- *@
@* This template is used by JS to add new image fields *@
<script id="image-template" type="text/html">
     <div class="product-image-item card mb-2" data-id="{{id}}">
        <div class="card-body p-3 d-flex align-items-start">
            <div class="handle me-3 cursor-grab">
                 <i class="ti ti-grip-vertical fs-2"></i>
            </div>
            <div class="flex-grow-1">
                <input type="hidden" name="Images[{{index}}].Id" value="{{id}}" class="image-id" />
                <input type="hidden" name="Images[{{index}}].ProductId" value="{{productId}}" />
                <input type="hidden" name="Images[{{index}}].IsDeleted" value="false" class="image-is-deleted" />

                <div class="form-group mb-3">
                    <label for="Images_{{index}}__ImageUrl" class="form-label required">URL Ảnh</label>
                    <div class="input-group">
                         <input type="text" name="Images[{{index}}].ImageUrl" id="Images_{{index}}__ImageUrl" value="{{imageUrl}}" class="form-control media-url-input" readonly />
                         <button class="btn btn-outline-secondary select-media-button" type="button"
                                data-bs-toggle="modal" data-bs-target="#selectMediaModal"
                                data-media-type-filter="0" data-target-input="#Images_{{index}}__ImageUrl">
                             <i class="ti ti-photo"></i>
                         </button>
                     </div>
                    <span data-valmsg-for="Images[{{index}}].ImageUrl" class="text-danger"></span>
                     <div class="media-preview-area mt-2">
                         {{#if imageUrl}}
                            <img src="{{imageUrl}}" style="max-width: 100px; height: auto;" class="img-thumbnail" />
                         {{/if}}
                     </div>
                 </div>

                <div class="form-group mb-3">
                    <label for="Images_{{index}}__ThumbnailUrl" class="form-label">URL Thumbnail</label>
                     <input type="text" name="Images[{{index}}].ThumbnailUrl" id="Images_{{index}}__ThumbnailUrl" value="{{thumbnailUrl}}" class="form-control" />
                    <span data-valmsg-for="Images[{{index}}].ThumbnailUrl" class="text-danger"></span>
                 </div>

                 <div class="form-group mb-3">
                     <label for="Images_{{index}}__AltText" class="form-label">Alt Text</label>
                     <input type="text" name="Images[{{index}}].AltText" id="Images_{{index}}__AltText" value="{{altText}}" class="form-control" />
                     <span data-valmsg-for="Images[{{index}}].AltText" class="text-danger"></span>
                 </div>

                 <div class="form-group mb-3">
                     <label for="Images_{{index}}__Title" class="form-label">Tiêu đề ảnh</label>
                     <input type="text" name="Images[{{index}}].Title" id="Images_{{index}}__Title" value="{{title}}" class="form-control" />
                     <span data-valmsg-for="Images[{{index}}].Title" class="text-danger"></span>
                 </div>

                 <input type="hidden" name="Images[{{index}}].OrderIndex" value="{{orderIndex}}" class="image-order-index" />


                 <div class="form-check form-switch mb-0 mt-3">
					<input class="form-check-input image-is-main" type="checkbox" name="Images[{{index}}].IsMain" id="Images_{{index}}__IsMain" role="switch" {{#if isMain}}checked{{/if}} value="true">
					<label class="form-check-label" for="Images_{{index}}__IsMain">Ảnh chính</label>
                    {{!-- Need a hidden input for false value for checkbox --}}
                    <input type="hidden" name="Images[{{index}}].IsMain" value="false" />
                    <span data-valmsg-for="Images[{{index}}].IsMain" class="text-danger"></span>
				</div>

            </div>
            <div class="flex-shrink-0 ms-3">
                 <button type="button" class="btn btn-icon btn-outline-danger remove-image-button" title="Xóa ảnh">
                     <i class="ti ti-x"></i>
                 </button>
            </div>
        </div>
     </div>
</script>

@* Partial view for a single image row (used by loop above and JS template) *@
<partial name="_ProductImageFields" />


@section Scripts {
    @* Include Sortable JS library if not already included globally *@
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    @* Include Handlebars JS library if not already included globally *@
    <script src="https://cdn.jsdelivr.net/npm/handlebars@4.7.7/dist/handlebars.min.js"></script>

	<script src="~/js/slug.js"></script>
    @* Assuming you have a JS file for the media modal handling *@
    @* <script src="~/js/media-modal.js"></script> *@
    @* Assuming you have a JS file for WYSIWYG editor initialization *@
    @* <script src="~/js/wysiwyg.js"></script> *@
    @* Assuming you have a JS file for TomSelect initialization *@
    @* <script src="~/js/tomselect.js"></script> *@
    @* Assuming you have a JS file for Datepicker initialization *@
    @* <script src="~/js/datepicker.js"></script> *@


	<script>
		$(document).ready(function() {
			const slugManager = SlugManager.init({
				nameInput: '#Name', // Use Product Name for slug generation
				slugInput: '#Slug',
				generateButton: '#generateSlugButton'
			});

			if ($('#Name').val() && !$('#Slug').val()) {
					slugManager.generateSlug();
			}

            // --- Product Image Management JS ---
            const $imageContainer = $('#product-images-container');
            const imageTemplateSource = $('#image-template').html();
            const imageTemplate = Handlebars.compile(imageTemplateSource);
            let imageIndexCounter = parseInt($('#image-index-counter').val());

            // Function to update input names/ids and order indexes
            function updateImageIndices() {
                $imageContainer.find('.product-image-item').each(function(index) {
                    const $item = $(this);
                    $item.find('input, select, textarea, button, label').each(function() {
                        const $el = $(this);
                        // Update 'name' attribute (for model binding)
                        const oldName = $el.attr('name');
                        if (oldName) {
                             // Handle checkbox hidden input specifically
                            if ($el.attr('type') === 'checkbox') {
                                const hiddenInput = $el.next('input[type="hidden"][name="' + oldName + '"]');
                                hiddenInput.attr('name', oldName.replace(/Images\[\d+\]/, `Images[${index}]`));
                            }
                             $el.attr('name', oldName.replace(/Images\[\d+\]/, `Images[${index}]`));
                        }
                        // Update 'id' attribute (for labels, JS targeting)
                        const oldId = $el.attr('id');
                         if (oldId) {
                            $el.attr('id', oldId.replace(/Images_\d+__/, `Images_${index}__`));
                         }
                        // Update 'for' attribute for labels
                        const oldFor = $el.attr('for');
                        if (oldFor) {
                           $el.attr('for', oldFor.replace(/Images_\d+__/, `Images_${index}__`));
                        }
                         // Update data-target-input for media button
                         const oldTarget = $el.attr('data-target-input');
                         if (oldTarget) {
                             $el.attr('data-target-input', oldTarget.replace(/#Images_\d+__/, `#Images_${index}__`));
                         }
                    });
                    // Update the order index hidden field
                    $item.find('.image-order-index').val(index);
                });
            }

            // Add Image Button Handler
            $('#add-image-button').on('click', function() {
                const newItemHtml = imageTemplate({
                    id: 0, // New image
                    productId: @Model.Id, // Link to current product ID if editing
                    imageUrl: '',
                    thumbnailUrl: '',
                    altText: '',
                    title: '',
                    orderIndex: imageIndexCounter,
                    isMain: false,
                    isDeleted: false,
                    index: imageIndexCounter // Use counter for initial index
                });
                $imageContainer.append(newItemHtml);
                updateImageIndices(); // Update indices after adding
                imageIndexCounter++; // Increment for the next new image
                 // Initialize new elements if needed (e.g., media picker buttons)
                 initMediaPickerButtons();
                 initImageInputWatchers(); // Re-attach preview watchers
            });

            // Remove Image Button Handler (uses event delegation)
            $imageContainer.on('click', '.remove-image-button', function() {
                const $item = $(this).closest('.product-image-item');
                const imageId = $item.data('id'); // Get the ID from data attribute

                if (imageId > 0) {
                    // Existing image: Mark as deleted visually and in hidden field
                     $item.hide(); // Or add a class for visual "deleted" state
                    $item.find('.image-is-deleted').val('true');
                     // Keep the item in the DOM so its hidden fields are submitted
                     // and the controller knows which existing image to delete.
                } else {
                    // New image: Remove completely from DOM
                    $item.remove();
                }
                updateImageIndices(); // Update indices after removing/hiding
            });

            // Make images sortable
            const sortable = new Sortable($imageContainer[0], {
                animation: 150,
                handle: '.handle', // Handle to drag
                onEnd: function (evt) {
                    updateImageIndices(); // Update indices after sorting
                }
            });

            // Media Picker Button Handler (uses event delegation)
            function initMediaPickerButtons() {
                 $imageContainer.find('.select-media-button').off('click').on('click', function() {
                    const $button = $(this);
                    // Get target input using data attribute
                    const targetInputSelector = $button.data('target-input');
                    const $targetInput = $(targetInputSelector);
                    if (!$targetInput.length) {
                        console.error("Media button target input not found:", targetInputSelector);
                        return; // Exit if target not found
                    }

                    const $preview = $targetInput.closest('.form-group').find('.media-preview-area');

                    // Callback function to handle selected file from modal
                    const callback = function(selectedFile) {
                        $targetInput.val(selectedFile.url).trigger('change'); // Set value and trigger change
                         // Update preview area for this specific input
                         $preview.html(`<img src="${selectedFile.url}" style="max-width: 100px; height: auto;" class="img-thumbnail" />`);

                         // If this is the main image input (Images[...].ImageUrl), maybe update thumbnail automatically?
                         // This is an optional enhancement. For now, just set the main URL.
                    };

                    // Assumes openMediaModal is a global function defined elsewhere
                    // Pass the button itself or target input to the modal if it needs context
                    if (typeof openMediaModal === 'function') {
                        openMediaModal($targetInput, callback);
                    } else {
                        console.error("openMediaModal function is not defined.");
                        alert("Media modal functionality is not available.");
                    }
                });
            }

            // Watch Image URL inputs to update previews
            function initImageInputWatchers() {
                $imageContainer.find('.media-url-input').off('input change').on('input change', function() {
                    const $input = $(this);
                    const $preview = $input.closest('.form-group').find('.media-preview-area');
                    if ($input.val() === '') {
                        $preview.empty();
                    } else {
                        // Simple image preview update
                         // Check if it's a valid image URL? For now, just trust the user/media picker.
                        $preview.html(`<img src="${$input.val()}" style="max-width: 100px; height: auto;" class="img-thumbnail" />`);
                    }
                });
            }

            // Watch IsMain checkboxes
            $imageContainer.on('change', '.image-is-main', function() {
                 const $changedCheckbox = $(this);
                 // If this checkbox was just checked
                 if ($changedCheckbox.is(':checked')) {
                     // Uncheck all other 'IsMain' checkboxes within this container
                     $imageContainer.find('.image-is-main').not($changedCheckbox).prop('checked', false);
                      // Ensure the hidden input for the unchecked ones is correctly set to false
                      $imageContainer.find('.image-is-main').not($changedCheckbox).each(function() {
                         $(this).next('input[type="hidden"]').val('false');
                      });
                 }
                 // Ensure the hidden input for the changed one is correct
                  $changedCheckbox.next('input[type="hidden"]').val($changedCheckbox.is(':checked').toString().toLowerCase());
            });


             // Initial setup:
             initMediaPickerButtons(); // Attach handlers to existing buttons
             initImageInputWatchers(); // Attach watchers to existing inputs
             updateImageIndices(); // Ensure initial indices are correct
		});
	</script>
}

@* This partial is rendered initially by the loop and also used as the Handlebars template structure *@
@* It needs to be callable directly AND accessible as a script template *@
@* To avoid Razor rendering errors on the template, it's often easier to just put the handlebars template in a script tag
   and have a separate, minimal Razor partial for the initial load, or make the template handle both scenarios.
   Let's make _ProductImageFields handle the Razor rendering directly, and the JS template is just HTML within script tags.
   The script template content is already defined above. *@

@* The actual Razor partial for rendering existing images *@
@section ProductImagePartial {
    @* This section allows the _ProductImageFields partial to be defined separately but used here *@
}