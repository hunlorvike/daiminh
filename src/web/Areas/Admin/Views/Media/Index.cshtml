@using web.Areas.Admin.ViewModels.Media
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
	ViewData["Title"] = "Thư viện Media";
	ViewData["Breadcrumbs"] = new List<(string Text, string Url)> { (ViewData["Title"].ToString() ?? "Media Library", "") };

	var tokens = Antiforgery.GetAndStoreTokens(Context);
	var antiForgeryTokenValue = tokens.RequestToken;
}

<div class="page-header d-print-none mb-3">
	<div class="row g-2 align-items-center">
		<div class="col">
			<!-- Breadcrumbs - populated by JS -->
			<nav aria-label="breadcrumb">
				<ol class="breadcrumb breadcrumb-arrows" id="media-breadcrumbs">
					<li class="breadcrumb-item"><a href="#" data-folder-id="">Media Library</a></li>
					@* Breadcrumbs will be added here by JS *@
				</ol>
			</nav>
		</div>
		<div class="col-auto ms-auto d-print-none">
			<div class="btn-list">
				<button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#createFolderModal">
					<i class="ti ti-folder-plus me-2"></i> Thêm thư mục
				</button>
				<label for="fileUploadInput" class="btn btn-primary">
					<i class="ti ti-upload me-2"></i> Tải lên file
				</label>
				<input type="file" id="fileUploadInput" multiple style="display: none;" />
			</div>
		</div>
	</div>
</div>


<!-- Drop Zone -->
<div id="drop-zone">
	Kéo & thả file vào đây hoặc click nút "Tải lên file"
</div>

<!-- Upload Progress -->
<div id="upload-progress-container">
	@* Progress bars will be added here by JS *@
</div>


<!-- Media Grid -->
<div id="media-grid-container">
	<div class="text-center p-4" id="media-loading-indicator">
		<div class="spinner-border text-primary" role="status"></div>
		<span class="ms-2">Đang tải...</span>
	</div>
	<div class="media-grid" id="media-grid">
		@* Media items will be loaded here by JS *@
	</div>
	<div class="text-center p-4" id="media-empty-indicator" style="display: none;">
		<div class="empty">
			<div class="empty-icon"><i class="ti ti-photo-off"></i></div>
			<p class="empty-title">Thư mục này trống</p>
			<p class="empty-subtitle text-muted">Hãy tải lên file hoặc tạo thư mục con.</p>
		</div>
	</div>
</div>


@* Include Modals *@
<partial name="_CreateFolderModal" model='new MediaFolderViewModel()' />
<partial name="_EditFileModal" model='new MediaFileEditViewModel()' />
@* Add Select Modal if implementing selection *@
@* <partial name="_SelectMediaModal" /> *@

@section Scripts {
	<script>
		$(document).ready(function () {
			const mediaGrid = $('#media-grid');
			const loadingIndicator = $('#media-loading-indicator');
			const emptyIndicator = $('#media-empty-indicator');
			const breadcrumbsContainer = $('#media-breadcrumbs');
			const fileUploadInput = $('#fileUploadInput');
			const dropZone = $('#drop-zone');
			const uploadProgressContainer = $('#upload-progress-container');
			let currentFolderId = null; // Store the current folder ID
			const antiForgeryToken = '@antiForgeryTokenValue';

				// --- Function to Load Items ---
			function loadMediaItems(folderId) {
				currentFolderId = folderId; // Update current folder
				loadingIndicator.show();
				emptyIndicator.hide();
				mediaGrid.empty(); // Clear previous items
				uploadProgressContainer.empty(); // Clear old progress bars

				$.ajax({
					url: `/api/admin/media/items`, // Adjust URL if needed
					type: 'GET',
					data: { folderId: folderId }, // Add searchTerm, mediaType later if needed
					dataType: 'json',
					success: function (result) {
						// Update Breadcrumbs
						breadcrumbsContainer.empty();
						result.breadcrumbs.forEach(function (crumb, index) {
							if (index === result.breadcrumbs.length - 1) { // Last item is active
								breadcrumbsContainer.append(`<li class="breadcrumb-item active" aria-current="page">${crumb.name}</li>`);
							} else {
								breadcrumbsContainer.append(`<li class="breadcrumb-item"><a href="#" class="folder-link" data-folder-id="${crumb.id || ''}">${crumb.name}</a></li>`);
							}
						});

						// Update Grid Items
						if (result.items && result.items.length > 0) {
							result.items.forEach(renderMediaItem);
							emptyIndicator.hide();
						} else {
							emptyIndicator.show();
						}
					},
					error: function (xhr, status, error) {
						console.error("Error loading media items:", status, error, xhr.responseText);
							// Show an error message to the user (e.g., using a toast library)
							toastr.error('Lỗi khi tải thư viện media.');
						emptyIndicator.show().find('.empty-title').text('Lỗi tải dữ liệu');
					},
					complete: function () {
						loadingIndicator.hide();
					}
				});
			}

			// --- Function to Render a Single Item ---
			function renderMediaItem(item) {
				const thumbnailUrl = item.thumbnailUrl || '';
				const itemHtml = `
				<div class="media-item ${item.isFolder ? 'folder-item' : 'file-item'}" data-id="${item.id}" data-path="${item.filePath || ''}" data-name="${item.name}" data-alt="${item.altText || ''}" data-type="${item.mediaType || ''}" data-mime="${item.mimeType || ''}" data-size="${item.fileSize || 0}" data-url="${thumbnailUrl}">
						<div class="media-item-actions">
						${!item.isFolder ? ` <button class="btn btn-sm btn-outline-secondary edit-file-btn" title="Sửa chi tiết"><i class="ti ti-pencil"></i></button>` : ''}
						<button class="btn btn-sm btn-outline-danger delete-item-btn" title="Xóa"
								data-id="${item.id}"
								data-name="${item.name}"
								data-is-folder="${item.isFolder}"
								data-delete-url="/api/admin/media/delete/${item.isFolder ? 'folder' : 'file'}/${item.id}"> @* Dynamic URL based on type *@
							<i class="ti ti-trash"></i>
						</button>
					</div>
					<div class="media-item-thumbnail">
						${item.isFolder
							? `<i class="icon-display ${item.displayIconClass}"></i>`
							: thumbnailUrl
								? `<img src="${thumbnailUrl}" alt="${item.altText || item.name}" loading="lazy" onerror="this.onerror=null; this.src='/img/placeholder.svg';">` // Add a placeholder image path
								: `<i class="icon-display ${item.displayIconClass}"></i>`
						}
					</div>
					<div class="media-item-name" title="${item.name}">${item.name}</div>
				</div>
				`;
				mediaGrid.append(itemHtml);
			}

			// --- Event Handlers ---

			// Navigate into folder or select file
			mediaGrid.on('click', '.media-item', function (e) {
				// Prevent triggering if clicking on buttons inside the item
				if ($(e.target).closest('.media-item-actions').length > 0) {
					return;
				}

				const item = $(this);
				if (item.hasClass('folder-item')) {
					const folderId = item.data('id');
					loadMediaItems(folderId);
				} else {
					// --- File Click Logic (for selection) ---
					// This is where you'd trigger the selection logic if
					// the media library was opened for choosing a file.
					// Example: Check if a callback function exists
					if (typeof window.mediaSelectionCallback === 'function') {
						const fileData = {
							id: item.data('id'),
							path: item.data('path'),
							url: item.data('url'), // The display URL (thumbnail or public)
							name: item.data('name'),
							alt: item.data('alt'),
							mime: item.data('mime'),
							size: item.data('size'),
							type: item.data('type')
						};
						window.mediaSelectionCallback(fileData);
						// Optionally close the selection modal here
						// $('#selectMediaModal').modal('hide');
					} else {
						// Default action: Maybe open edit modal?
						console.log("File clicked (no selection callback):", item.data('id'));
						// Example: Trigger edit button click
						item.find('.edit-file-btn').click();
					}
				}
			});

			// Breadcrumb navigation
			breadcrumbsContainer.on('click', 'a.folder-link', function (e) {
				e.preventDefault();
				const folderId = $(this).data('folder-id') === '' ? null : $(this).data('folder-id');
				loadMediaItems(folderId);
			});

				// Handle file input change
			fileUploadInput.on('change', function (e) {
				handleFiles(e.target.files);
				$(this).val(''); // Reset input to allow selecting the same file again
			});

				// --- Drag and Drop ---
			dropZone.on('dragover', function (e) {
				e.preventDefault();
				e.stopPropagation();
				$(this).addClass('dragover');
			});
			dropZone.on('dragleave', function (e) {
				e.preventDefault();
				e.stopPropagation();
				$(this).removeClass('dragover');
			});
			dropZone.on('drop', function (e) {
				e.preventDefault();
				e.stopPropagation();
				$(this).removeClass('dragover');
				handleFiles(e.originalEvent.dataTransfer.files);
			});
				dropZone.on('click', function() { // Allow clicking the dropzone to trigger file input
					fileUploadInput.click();
				});


			// --- Function to Handle Files (from input or drop) ---
			function handleFiles(files) {
				if (!files || files.length === 0) return;

				for (let i = 0; i < files.length; i++) {
					uploadFile(files[i]);
				}
			}

			// --- Function to Upload a Single File ---
			function uploadFile(file) {
				const formData = new FormData();
				formData.append('file', file);
				// Add folderId to the upload URL
				const uploadUrl = `/api/admin/media/upload${currentFolderId ? '?folderId=' + currentFolderId : ''}`;

				// Create progress bar element
				const progressId = `upload-progress-${Date.now()}-${Math.random().toString(36).substring(2)}`;
				const progressHtml = `
					<div id="${progressId}" class="mb-2">
						<div class="d-flex justify-content-between align-items-center mb-1">
							<small class="text-muted text-truncate" style="max-width: 70%;">${file.name}</small>
							<small class="status fw-bold text-muted">Đang tải lên...</small>
						</div>
						<div class="progress progress-sm">
							<div class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
						</div>
					</div>`;
				uploadProgressContainer.append(progressHtml);
				const progressBarDiv = $(`#${progressId}`);
				const progressBar = progressBarDiv.find('.progress-bar');
				const statusText = progressBarDiv.find('.status');


				$.ajax({
					url: uploadUrl,
					type: 'POST',
					data: formData,
					processData: false, // Prevent jQuery from processing the data
					contentType: false, // Let the browser set the correct content type for FormData
					headers: {
							// Include AntiForgeryToken if your API requires it for POST
							// 'RequestVerificationToken': antiForgeryToken
					},
					xhr: function () { // Add progress handling
						const xhr = new window.XMLHttpRequest();
						xhr.upload.addEventListener('progress', function (evt) {
							if (evt.lengthComputable) {
								const percentComplete = Math.round((evt.loaded / evt.total) * 100);
								progressBar.css('width', percentComplete + '%').attr('aria-valuenow', percentComplete);
									statusText.text(`${percentComplete}%`);
							}
						}, false);
						return xhr;
					},
					success: function (result) {
							statusText.text('Hoàn thành').removeClass('text-muted').addClass('text-success');
							progressBar.addClass('bg-success');
							// Add the new item to the grid without full reload
							renderMediaItem(result); // Assuming API returns the MediaItemViewModel
							emptyIndicator.hide(); // Hide empty message if it was visible
							// Remove progress bar after a delay
						setTimeout(() => progressBarDiv.fadeOut(500, () => progressBarDiv.remove()), 2000);
					},
					error: function (xhr, status, error) {
						console.error("Upload error:", status, error, xhr.responseText);
						let errorMessage = 'Lỗi tải lên';
						if(xhr.responseJSON && xhr.responseJSON.message) {
							errorMessage = xhr.responseJSON.message;
						} else if (xhr.status === 413) { // Request Entity Too Large
							errorMessage = 'Lỗi: File quá lớn.';
						}
						statusText.text(errorMessage).removeClass('text-muted').addClass('text-danger');
							progressBar.addClass('bg-danger').css('width', '100%'); // Show full red bar on error
							// Don't remove error progress bar immediately
					}
				});
			}


			// --- Folder Creation Modal ---
			const createFolderModal = new bootstrap.Modal(document.getElementById('createFolderModal'));
			const createFolderForm = $('#createFolderForm'); // Give your modal form an ID

				createFolderForm.on('submit', function(e) {
					e.preventDefault();
					if (!$(this).valid()) { // Check jQuery validation
						return;
					}

					const submitButton = $(this).find('button[type="submit"]');
					const originalButtonText = submitButton.html();
					submitButton.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang tạo...');

					const formData = {
						Name: $('#folderNameInput').val(), // Ensure input has ID="folderNameInput"
						Description: $('#folderDescriptionInput').val(), // Ensure input has ID="folderDescriptionInput"
						ParentId: currentFolderId
					};

					$.ajax({
					url: '/api/admin/media/folder',
					type: 'POST',
					contentType: 'application/json',
					data: JSON.stringify(formData),
					headers: { 'RequestVerificationToken': antiForgeryToken },
					success: function(result) {
						createFolderModal.hide();
						renderMediaItem(result);
						emptyIndicator.hide();


						toastr.success('Tạo thư mục thành công!');
						createFolderForm[0].reset(); // Reset form fields
						// Remove validation error messages if any
						$(createFolderForm).find('.is-invalid').removeClass('is-invalid');
						$(createFolderForm).find('.invalid-feedback, .text-danger').remove();

					},
					error: function(xhr) {
						console.error("Create folder error:", xhr.responseText);
						toastr.error('Lỗi khi tạo thư mục.');
						// Display validation errors from API response
						if (xhr.responseJSON) {
							$.each(xhr.responseJSON, function(key, value) {
								// Find the input - assumes input name matches key (case-insensitive)
								// Or adjust based on IDs (e.g. #folderNameInput)
								let inputField = $(createFolderForm).find(`[name="${key}"]`);
								if (!inputField.length && key.toLowerCase() === 'name') inputField = $('#folderNameInput');
								if (!inputField.length && key.toLowerCase() === 'description') inputField = $('#folderDescriptionInput');

								if (inputField.length) {
									inputField.addClass('is-invalid');
									// Remove existing message before adding new one
									inputField.closest('.form-group').find('.invalid-feedback').remove();
									inputField.closest('.form-group').find('.text-danger').remove(); // Remove general text-danger too
									// Add new message
									inputField.after(`<div class="invalid-feedback d-block">${value.join(', ')}</div>`); // Use d-block with invalid-feedback
								} else {
									// Show general error if field not found
									$(createFolderForm).find('.modal-body').prepend(`<div class="alert alert-danger alert-dismissible fade show" role="alert">${key}: ${value.join(', ')}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`)
								}
							});
						}
					},
					complete: function() {
						submitButton.prop('disabled', false).html(originalButtonText);
					}
					});
				});
				// Clear validation errors when modal is hidden
				$('#createFolderModal').on('hidden.bs.modal', function () {
					createFolderForm[0].reset();
					$(createFolderForm).find('.is-invalid').removeClass('is-invalid');
					$(createFolderForm).find('.invalid-feedback, .text-danger').remove();
					$(createFolderForm).find('.alert-danger').remove();
				});

				// --- Edit File Modal ---
				const editFileModal = new bootstrap.Modal(document.getElementById('editFileModal'));
				const editFileForm = $('#editFileForm'); // Give your edit modal form an ID
				let currentEditFileId = null;

				 // Open Edit Modal
				 mediaGrid.on('click', '.edit-file-btn', function(e) {
					  e.stopPropagation(); // Prevent media item click
					 const button = $(this);
					 const itemDiv = button.closest('.media-item');
					 currentEditFileId = itemDiv.data('id');

					 // Fetch details from API
					  // $('#editFileModal .modal-body').html('<div class="text-center p-4"><div class="spinner-border text-primary" role="status"></div></div>'); // Show loading
					  editFileModal.show(); // Show modal while loading

					  $.ajax({
						   url: `/api/admin/media/file/details/${currentEditFileId}`,
						   type: 'GET',
						   success: function(data) {
							   // Populate form fields
							   $('#editFileIdInput').val(data.id); // Hidden input for ID
							   $('#editFileNameDisplay').text(data.fileName); // Display filename
							   $('#editFileAltTextInput').val(data.altText || ''); // Input for AltText
							   $('#editFileDescriptionInput').val(data.description || ''); // Input for Description
							   $('#editFileThumbnailPreview').attr('src', data.thumbnailUrl || '/img/placeholder.svg'); // Thumbnail preview
							   // Clear previous validation
							   $(editFileForm).find('.is-invalid').removeClass('is-invalid');
							   $(editFileForm).find('.invalid-feedback, .text-danger').remove();
							   $(editFileForm).find('.alert-danger').remove();

						   },
						   error: function() {
								$('#editFileModal .modal-body').html('<p class="text-danger text-center">Lỗi tải chi tiết file.</p>');
						   }
					  });
				 });

				// Submit Edit Form
				editFileForm.on('submit', function(e) {
					e.preventDefault();
					if (!$(this).valid()) { return; }

					const submitButton = $(this).find('button[type="submit"]');
					const originalButtonText = submitButton.html();
					submitButton.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang lưu...');

					const formData = {
						Id: parseInt($('#editFileIdInput').val()),
						AltText: $('#editFileAltTextInput').val(),
						Description: $('#editFileDescriptionInput').val()
					};

					$.ajax({
						url: `/api/admin/media/file/details/${formData.Id}`,
						type: 'PUT', // Use PUT for update
						contentType: 'application/json',
						data: JSON.stringify(formData),
						headers: { /* 'RequestVerificationToken': antiForgeryToken */ },
						success: function() {
							editFileModal.hide();
							toastr.success('Cập nhật chi tiết file thành công!');
							// Update the item in the grid (optional, needs finding the item)
							const itemInGrid = mediaGrid.find(`.media-item[data-id="${formData.Id}"]`);
							if(itemInGrid.length) {
								itemInGrid.data('alt', formData.AltText); // Update data attribute
								itemInGrid.find('img').attr('alt', formData.AltText || itemInGrid.data('name')); // Update img alt
								// You might need to update other displayed info if Description is shown
							}
						},
						error: function(xhr) {
							console.error("Update file error:", xhr.responseText);
							toastr.error('Lỗi khi cập nhật chi tiết file.');
							// Display validation or general errors in modal
							if (xhr.responseJSON) {
								$.each(xhr.responseJSON, function(key, value) {
									// Simplified error display, attach to respective fields or show general alert
									let inputField = $(editFileForm).find(`[name="${key}"]`); // Case-insensitive might be needed
									if (!inputField.length && key.toLowerCase() === 'alttext') inputField = $('#editFileAltTextInput');
									if (!inputField.length && key.toLowerCase() === 'description') inputField = $('#editFileDescriptionInput');

									if(inputField.length) {
										inputField.addClass('is-invalid');
										inputField.closest('.form-group').find('.invalid-feedback').remove();
										inputField.closest('.form-group').find('.text-danger').remove();
										inputField.after(`<div class="invalid-feedback d-block">${value.join(', ')}</div>`);
									} else {
										$(editFileForm).find('.modal-body').prepend(`<div class="alert alert-danger alert-dismissible fade show" role="alert">${key}: ${value.join(', ')}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`)
									}
								});
							} else {
									$(editFileForm).find('.modal-body').prepend(`<div class="alert alert-danger alert-dismissible fade show" role="alert">Đã xảy ra lỗi không mong muốn.<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`)
							}
						},
						complete: function() {
							submitButton.prop('disabled', false).html(originalButtonText);
						}
					});
				});

			// Clear edit form validation on hide
				$('#editFileModal').on('hidden.bs.modal', function () {
					// Don't reset fields here as they are loaded dynamically
					$(editFileForm).find('.is-invalid').removeClass('is-invalid');
					$(editFileForm).find('.invalid-feedback, .text-danger').remove();
					$(editFileForm).find('.alert-danger').remove();
				});


			// --- Common Delete Logic Integration ---
			// The common delete script in site.js should handle buttons with class 'delete-item-btn'
			// Make sure the common script uses AJAX and provides feedback (toast/reload)
			// You might need a custom success callback for media items if you want to remove
			// the item from the grid without reloading the whole view.

			// Example of custom callback (define this function globally or attach to window):
			// window.removeMediaItemFromGrid = function(deletedItemId) {
			//      mediaGrid.find(`.media-item[data-id="${deletedItemId}"]`).fadeOut(400, function() {
			//          $(this).remove();
			//          // Show empty indicator if grid becomes empty
			//          if (mediaGrid.children().length === 0) {
			//              emptyIndicator.show();
			//          }
			//      });
			// }
			// Then add data-success-callback="removeMediaItemFromGrid" to the delete buttons.


			// --- Initial Load ---
			loadMediaItems(null); // Load root folder initially

		});
	</script>
}